{"message":"redundant else block","code":{"code":"clippy::redundant_else","explanation":null},"level":"warning","spans":[{"file_name":"src/compiler.rs","byte_start":26187,"byte_end":26655,"line_start":776,"line_end":789,"column_start":20,"column_end":14,"is_primary":true,"text":[{"text":"            } else {","highlight_start":20,"highlight_end":21},{"text":"                match self.current.token_type {","highlight_start":1,"highlight_end":48},{"text":"                    TokenType::Class","highlight_start":1,"highlight_end":37},{"text":"                    | TokenType::Fun","highlight_start":1,"highlight_end":37},{"text":"                    | TokenType::Var","highlight_start":1,"highlight_end":37},{"text":"                    | TokenType::For","highlight_start":1,"highlight_end":37},{"text":"                    | TokenType::If","highlight_start":1,"highlight_end":36},{"text":"                    | TokenType::While","highlight_start":1,"highlight_end":39},{"text":"                    | TokenType::Print","highlight_start":1,"highlight_end":39},{"text":"                    | TokenType::Return => return,","highlight_start":1,"highlight_end":51},{"text":"                    _ => (),","highlight_start":1,"highlight_end":29},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                self.advance();","highlight_start":1,"highlight_end":32},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::redundant-else` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the `else` block and move the contents out","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant else block\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/compiler.rs:776:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m776\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            } else {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m777\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                match self.current.token_type {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m778\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    TokenType::Class\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m779\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    | TokenType::Fun\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.advance();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::redundant-else` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: remove the `else` block and move the contents out\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else\u001b[0m\n\n"}
{"message":"redundant else block","code":{"code":"clippy::redundant_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":27535,"byte_end":27661,"line_start":609,"line_end":612,"column_start":28,"column_end":22,"is_primary":true,"text":[{"text":"                    } else {","highlight_start":28,"highlight_end":29},{"text":"                        self.stack.truncate(frame.slot);","highlight_start":1,"highlight_end":57},{"text":"                        self.push(result)?","highlight_start":1,"highlight_end":43},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the `else` block and move the contents out","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant else block\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:609:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    } else {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m____________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m610\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.stack.truncate(frame.slot);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m611\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.push(result)?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m612\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: remove the `else` block and move the contents out\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else\u001b[0m\n\n"}
{"message":"redundant else block","code":{"code":"clippy::redundant_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":27952,"byte_end":28082,"line_start":619,"line_end":622,"column_start":28,"column_end":22,"is_primary":true,"text":[{"text":"                    } else {","highlight_start":28,"highlight_end":29},{"text":"                        self.stack.truncate(frame.slot);","highlight_start":1,"highlight_end":57},{"text":"                        self.push(Value::Nil)?","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the `else` block and move the contents out","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant else block\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:619:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m619\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                    } else {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m____________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m620\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.stack.truncate(frame.slot);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m621\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.push(Value::Nil)?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m622\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: remove the `else` block and move the contents out\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else\u001b[0m\n\n"}
{"message":"unused `self` argument","code":{"code":"clippy::unused_self","explanation":null},"level":"warning","spans":[{"file_name":"src/chunk.rs","byte_start":9120,"byte_end":9125,"line_start":254,"line_end":254,"column_start":36,"column_end":41,"is_primary":true,"text":[{"text":"    fn value_instruction_to_string(&self, instruction: &str, index: usize) -> String {","highlight_start":36,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::unused-self` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider refactoring to a associated function","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `self` argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/chunk.rs:254:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn value_instruction_to_string(&self, instruction: &str, index: usize) -> String {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::unused-self` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider refactoring to a associated function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_self\u001b[0m\n\n"}
{"message":"usage of wildcard import","code":{"code":"clippy::wildcard_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/compiler.rs","byte_start":132,"byte_end":142,"line_start":5,"line_end":5,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    scanner::*,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::wildcard-imports` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/compiler.rs","byte_start":132,"byte_end":142,"line_start":5,"line_end":5,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    scanner::*,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"scanner::{Scanner, Token, TokenType}","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of wildcard import\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/compiler.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    scanner::*,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `scanner::{Scanner, Token, TokenType}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::wildcard-imports` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports\u001b[0m\n\n"}
{"message":"this function has too many lines (179/100)","code":{"code":"clippy::too_many_lines","explanation":null},"level":"warning","spans":[{"file_name":"src/compiler.rs","byte_start":782,"byte_end":6699,"line_start":32,"line_end":214,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    fn new(code: &'s str, gc: &'s mut Gc) -> Self {","highlight_start":5,"highlight_end":52},{"text":"        let mut parse_rules = HashMap::new();","highlight_start":1,"highlight_end":46},{"text":"        let mut rule = |kind, prefix, infix, precedence| {","highlight_start":1,"highlight_end":59},{"text":"            parse_rules.insert(","highlight_start":1,"highlight_end":32},{"text":"                kind,","highlight_start":1,"highlight_end":22},{"text":"                ParseRule {","highlight_start":1,"highlight_end":28},{"text":"                    prefix,","highlight_start":1,"highlight_end":28},{"text":"                    infix,","highlight_start":1,"highlight_end":27},{"text":"                    precedence,","highlight_start":1,"highlight_end":32},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::LeftParen,","highlight_start":1,"highlight_end":34},{"text":"            Some(Parser::grouping),","highlight_start":1,"highlight_end":36},{"text":"            Some(Parser::call),","highlight_start":1,"highlight_end":32},{"text":"            Precedence::Call,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(TokenType::RightParen, None, None, Precedence::None);","highlight_start":1,"highlight_end":67},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::LeftBracket,","highlight_start":1,"highlight_end":36},{"text":"            Some(Parser::array),","highlight_start":1,"highlight_end":33},{"text":"            Some(Parser::index),","highlight_start":1,"highlight_end":33},{"text":"            Precedence::Call,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(TokenType::RightBracket, None, None, Precedence::None);","highlight_start":1,"highlight_end":69},{"text":"        rule(TokenType::LeftBrace, None, None, Precedence::None);","highlight_start":1,"highlight_end":66},{"text":"        rule(TokenType::RightBrace, None, None, Precedence::None);","highlight_start":1,"highlight_end":67},{"text":"        rule(TokenType::Comma, None, None, Precedence::None);","highlight_start":1,"highlight_end":62},{"text":"        rule(TokenType::Dot, None, Some(Parser::dot), Precedence::Call);","highlight_start":1,"highlight_end":73},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::Minus,","highlight_start":1,"highlight_end":30},{"text":"            Some(Parser::unary),","highlight_start":1,"highlight_end":33},{"text":"            Some(Parser::binary),","highlight_start":1,"highlight_end":34},{"text":"            Precedence::Term,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::Plus,","highlight_start":1,"highlight_end":29},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Some(Parser::binary),","highlight_start":1,"highlight_end":34},{"text":"            Precedence::Term,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::Rem,","highlight_start":1,"highlight_end":28},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Some(Parser::binary),","highlight_start":1,"highlight_end":34},{"text":"            Precedence::Factor,","highlight_start":1,"highlight_end":32},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(TokenType::Semicolon, None, None, Precedence::None);","highlight_start":1,"highlight_end":66},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::Slash,","highlight_start":1,"highlight_end":30},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Some(Parser::binary),","highlight_start":1,"highlight_end":34},{"text":"            Precedence::Factor,","highlight_start":1,"highlight_end":32},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::Star,","highlight_start":1,"highlight_end":29},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Some(Parser::binary),","highlight_start":1,"highlight_end":34},{"text":"            Precedence::Factor,","highlight_start":1,"highlight_end":32},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(TokenType::Bang, Some(Parser::unary), None, Precedence::None);","highlight_start":1,"highlight_end":76},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::BangEqual,","highlight_start":1,"highlight_end":34},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Some(Parser::binary),","highlight_start":1,"highlight_end":34},{"text":"            Precedence::Equality,","highlight_start":1,"highlight_end":34},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(TokenType::Equal, None, None, Precedence::None);","highlight_start":1,"highlight_end":62},{"text":"        rule(TokenType::PlusEqual, None, None, Precedence::None);","highlight_start":1,"highlight_end":66},{"text":"        rule(TokenType::MinusEqual, None, None, Precedence::None);","highlight_start":1,"highlight_end":67},{"text":"        rule(TokenType::SlashEqual, None, None, Precedence::None);","highlight_start":1,"highlight_end":67},{"text":"        rule(TokenType::StarEqual, None, None, Precedence::None);","highlight_start":1,"highlight_end":66},{"text":"        rule(TokenType::PlusPlus, None, None, Precedence::None);","highlight_start":1,"highlight_end":65},{"text":"        rule(TokenType::MinusMinus, None, None, Precedence::None);","highlight_start":1,"highlight_end":67},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::EqualEqual,","highlight_start":1,"highlight_end":35},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Some(Parser::binary),","highlight_start":1,"highlight_end":34},{"text":"            Precedence::Equality,","highlight_start":1,"highlight_end":34},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::Greater,","highlight_start":1,"highlight_end":32},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Some(Parser::binary),","highlight_start":1,"highlight_end":34},{"text":"            Precedence::Comparison,","highlight_start":1,"highlight_end":36},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::GreaterEqual,","highlight_start":1,"highlight_end":37},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Some(Parser::binary),","highlight_start":1,"highlight_end":34},{"text":"            Precedence::Comparison,","highlight_start":1,"highlight_end":36},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::Less,","highlight_start":1,"highlight_end":29},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Some(Parser::binary),","highlight_start":1,"highlight_end":34},{"text":"            Precedence::Comparison,","highlight_start":1,"highlight_end":36},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::LessEqual,","highlight_start":1,"highlight_end":34},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Some(Parser::binary),","highlight_start":1,"highlight_end":34},{"text":"            Precedence::Comparison,","highlight_start":1,"highlight_end":36},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::Identifier,","highlight_start":1,"highlight_end":35},{"text":"            Some(Parser::variable),","highlight_start":1,"highlight_end":36},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Precedence::None,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::Input,","highlight_start":1,"highlight_end":30},{"text":"            Some(Parser::input),","highlight_start":1,"highlight_end":33},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Precedence::None,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::RString,","highlight_start":1,"highlight_end":32},{"text":"            Some(Parser::string),","highlight_start":1,"highlight_end":34},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Precedence::None,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::Number,","highlight_start":1,"highlight_end":31},{"text":"            Some(Parser::number),","highlight_start":1,"highlight_end":34},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Precedence::None,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(TokenType::And, None, Some(Parser::and_op), Precedence::And);","highlight_start":1,"highlight_end":75},{"text":"        rule(TokenType::Class, None, None, Precedence::None);","highlight_start":1,"highlight_end":62},{"text":"        rule(TokenType::Const, None, None, Precedence::None);","highlight_start":1,"highlight_end":62},{"text":"        rule(TokenType::Else, None, None, Precedence::None);","highlight_start":1,"highlight_end":61},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::False,","highlight_start":1,"highlight_end":30},{"text":"            Some(Parser::literal),","highlight_start":1,"highlight_end":35},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Precedence::None,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(TokenType::For, None, None, Precedence::None);","highlight_start":1,"highlight_end":60},{"text":"        rule(TokenType::Fun, None, None, Precedence::None);","highlight_start":1,"highlight_end":60},{"text":"        rule(TokenType::If, None, None, Precedence::None);","highlight_start":1,"highlight_end":59},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::Nil,","highlight_start":1,"highlight_end":28},{"text":"            Some(Parser::literal),","highlight_start":1,"highlight_end":35},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Precedence::None,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(TokenType::Or, None, Some(Parser::or_op), Precedence::Or);","highlight_start":1,"highlight_end":72},{"text":"        rule(TokenType::Print, None, None, Precedence::None);","highlight_start":1,"highlight_end":62},{"text":"        rule(TokenType::Return, None, None, Precedence::None);","highlight_start":1,"highlight_end":63},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::Super,","highlight_start":1,"highlight_end":30},{"text":"            Some(Parser::super_),","highlight_start":1,"highlight_end":34},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Precedence::None,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(TokenType::This, Some(Parser::this), None, Precedence::None);","highlight_start":1,"highlight_end":75},{"text":"        rule(","highlight_start":1,"highlight_end":14},{"text":"            TokenType::True,","highlight_start":1,"highlight_end":29},{"text":"            Some(Parser::literal),","highlight_start":1,"highlight_end":35},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"            Precedence::None,","highlight_start":1,"highlight_end":30},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        rule(TokenType::Var, None, None, Precedence::None);","highlight_start":1,"highlight_end":60},{"text":"        rule(TokenType::While, None, None, Precedence::None);","highlight_start":1,"highlight_end":62},{"text":"        rule(TokenType::Error, None, None, Precedence::None);","highlight_start":1,"highlight_end":62},{"text":"        rule(TokenType::Eof, None, None, Precedence::None);","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let compiler = Compiler::new(gc.intern(\"script\".to_owned()), FunctionType::Script);","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Parser {","highlight_start":1,"highlight_end":17},{"text":"            current: Token::syntethic(\"\"),","highlight_start":1,"highlight_end":43},{"text":"            previous: Token::syntethic(\"\"),","highlight_start":1,"highlight_end":44},{"text":"            gc,","highlight_start":1,"highlight_end":16},{"text":"            scanner: Scanner::new(code),","highlight_start":1,"highlight_end":41},{"text":"            had_error: false,","highlight_start":1,"highlight_end":30},{"text":"            panic_mode: false,","highlight_start":1,"highlight_end":31},{"text":"            parse_rules,","highlight_start":1,"highlight_end":25},{"text":"            compiler,","highlight_start":1,"highlight_end":22},{"text":"            class_compiler: None,","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::too-many-lines` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many lines (179/100)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/compiler.rs:32:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new(code: &'s str, gc: &'s mut Gc) -> Self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut parse_rules = HashMap::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut rule = |kind, prefix, infix, precedence| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            parse_rules.insert(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\u001b[0m\n\n"}
{"message":"unnecessary boolean `not` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/compiler.rs","byte_start":25706,"byte_end":25824,"line_start":758,"line_end":763,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !self.check(ttype) {","highlight_start":9,"highlight_end":32},{"text":"            false","highlight_start":1,"highlight_end":18},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            self.advance();","highlight_start":1,"highlight_end":28},{"text":"            true","highlight_start":1,"highlight_end":17},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::if-not-else` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the `!` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary boolean `not` operation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/compiler.rs:758:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m758\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if !self.check(ttype) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m759\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            false\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m760\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.advance();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m762\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            true\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m763\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::if-not-else` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: remove the `!` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/compiler.rs","byte_start":27136,"byte_end":27179,"line_start":809,"line_end":809,"column_start":9,"column_end":52,"is_primary":true,"text":[{"text":"        self.emit_opcode(OpCode::DefineGlobal(var))","highlight_start":9,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::semicolon-if-nothing-returned` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/compiler.rs","byte_start":27136,"byte_end":27179,"line_start":809,"line_end":809,"column_start":9,"column_end":52,"is_primary":true,"text":[{"text":"        self.emit_opcode(OpCode::DefineGlobal(var))","highlight_start":9,"highlight_end":52}],"label":null,"suggested_replacement":"self.emit_opcode(OpCode::DefineGlobal(var));","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/compiler.rs:809:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m809\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.emit_opcode(OpCode::DefineGlobal(var))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.emit_opcode(OpCode::DefineGlobal(var));`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::semicolon-if-nothing-returned` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"item name starts with its containing module's name","code":{"code":"clippy::module_name_repetitions","explanation":null},"level":"warning","spans":[{"file_name":"src/gc.rs","byte_start":160,"byte_end":400,"line_start":10,"line_end":16,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub trait GcTrace {","highlight_start":1,"highlight_end":20},{"text":"    fn format(&self, f: &mut fmt::Formatter, gc: &Gc) -> fmt::Result;","highlight_start":1,"highlight_end":70},{"text":"    fn trace(&self, gc: &mut Gc);","highlight_start":1,"highlight_end":34},{"text":"    fn size(&self) -> usize;","highlight_start":1,"highlight_end":29},{"text":"    fn as_any(&self) -> &dyn Any;","highlight_start":1,"highlight_end":34},{"text":"    fn as_any_mut(&mut self) -> &mut dyn Any;","highlight_start":1,"highlight_end":46},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::module-name-repetitions` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: item name starts with its containing module's name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gc.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait GcTrace {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn format(&self, f: &mut fmt::Formatter, gc: &Gc) -> fmt::Result;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn trace(&self, gc: &mut Gc);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn size(&self) -> usize;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_any(&self) -> &dyn Any;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_any_mut(&mut self) -> &mut dyn Any;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::module-name-repetitions` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions\u001b[0m\n\n"}
{"message":"item name starts with its containing module's name","code":{"code":"clippy::module_name_repetitions","explanation":null},"level":"warning","spans":[{"file_name":"src/gc.rs","byte_start":404,"byte_end":503,"line_start":18,"line_end":22,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub struct GcObject {","highlight_start":1,"highlight_end":22},{"text":"    is_marked: bool,","highlight_start":1,"highlight_end":21},{"text":"    size: usize,","highlight_start":1,"highlight_end":17},{"text":"    pub object: Box<dyn GcTrace>,","highlight_start":1,"highlight_end":34},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: item name starts with its containing module's name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gc.rs:18:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GcObject {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    is_marked: bool,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    size: usize,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub object: Box<dyn GcTrace>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions\u001b[0m\n\n"}
{"message":"item name starts with its containing module's name","code":{"code":"clippy::module_name_repetitions","explanation":null},"level":"warning","spans":[{"file_name":"src/gc.rs","byte_start":507,"byte_end":589,"line_start":24,"line_end":27,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub struct GcRef<T: GcTrace> {","highlight_start":1,"highlight_end":31},{"text":"    index: usize,","highlight_start":1,"highlight_end":18},{"text":"    _marker: PhantomData<T>,","highlight_start":1,"highlight_end":29},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: item name starts with its containing module's name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gc.rs:24:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GcRef<T: GcTrace> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    index: usize,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    _marker: PhantomData<T>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/gc.rs","byte_start":1331,"byte_end":1353,"line_start":58,"line_end":58,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        self.index.hash(state)","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/gc.rs","byte_start":1331,"byte_end":1353,"line_start":58,"line_end":58,"column_start":9,"column_end":31,"is_primary":true,"text":[{"text":"        self.index.hash(state)","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":"self.index.hash(state);","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gc.rs:58:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.index.hash(state)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.index.hash(state);`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/gc.rs","byte_start":4682,"byte_end":4716,"line_start":175,"line_end":175,"column_start":13,"column_end":47,"is_primary":true,"text":[{"text":"            panic!(\"Double free on {}\", index)","highlight_start":13,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/gc.rs","byte_start":4682,"byte_end":4716,"line_start":175,"line_end":175,"column_start":13,"column_end":47,"is_primary":true,"text":[{"text":"            panic!(\"Double free on {}\", index)","highlight_start":13,"highlight_end":47}],"label":null,"suggested_replacement":"panic!(\"Double free on {}\", index);","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gc.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            panic!(\"Double free on {}\", index)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `panic!(\"Double free on {}\", index);`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"item name starts with its containing module's name","code":{"code":"clippy::module_name_repetitions","explanation":null},"level":"warning","spans":[{"file_name":"src/gc.rs","byte_start":7371,"byte_end":7451,"line_start":274,"line_end":277,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub struct GcTraceFormatter<'s, T: GcTrace> {","highlight_start":1,"highlight_end":46},{"text":"    value: T,","highlight_start":1,"highlight_end":14},{"text":"    gc: &'s Gc,","highlight_start":1,"highlight_end":16},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: item name starts with its containing module's name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gc.rs:274:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m274\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct GcTraceFormatter<'s, T: GcTrace> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    value: T,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    gc: &'s Gc,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/object.rs","byte_start":4615,"byte_end":4633,"line_start":222,"line_end":222,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"            gc.mark_value(obj)","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/object.rs","byte_start":4615,"byte_end":4633,"line_start":222,"line_end":222,"column_start":13,"column_end":31,"is_primary":true,"text":[{"text":"            gc.mark_value(obj)","highlight_start":13,"highlight_end":31}],"label":null,"suggested_replacement":"gc.mark_value(obj);","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/object.rs:222:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            gc.mark_value(obj)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `gc.mark_value(obj);`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"it is more concise to loop over references to containers instead of using explicit iteration methods","code":{"code":"clippy::explicit_iter_loop","explanation":null},"level":"warning","spans":[{"file_name":"src/preprocessor.rs","byte_start":1294,"byte_end":1309,"line_start":37,"line_end":37,"column_start":17,"column_end":32,"is_primary":true,"text":[{"text":"    for line in temp.iter_mut() {","highlight_start":17,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::explicit-iter-loop` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"to write this more concisely, try","code":null,"level":"help","spans":[{"file_name":"src/preprocessor.rs","byte_start":1294,"byte_end":1309,"line_start":37,"line_end":37,"column_start":17,"column_end":32,"is_primary":true,"text":[{"text":"    for line in temp.iter_mut() {","highlight_start":17,"highlight_end":32}],"label":null,"suggested_replacement":"&mut temp","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: it is more concise to loop over references to containers instead of using explicit iteration methods\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/preprocessor.rs:37:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    for line in temp.iter_mut() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: to write this more concisely, try: `&mut temp`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::explicit-iter-loop` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop\u001b[0m\n\n"}
{"message":"unnecessary boolean `not` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/preprocessor.rs","byte_start":1522,"byte_end":1894,"line_start":42,"line_end":49,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                if !imported.contains(&file) {","highlight_start":17,"highlight_end":47},{"text":"                    imported.push(file.clone());","highlight_start":1,"highlight_end":49},{"text":"                    let mut import_file = fs::read_to_string(file).expect(\"File not found\");","highlight_start":1,"highlight_end":93},{"text":"                    include_resolver(&mut import_file, imported);","highlight_start":1,"highlight_end":66},{"text":"                    *line = import_file;","highlight_start":1,"highlight_end":41},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    *line = String::new();","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the `!` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary boolean `not` operation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/preprocessor.rs:42:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if !imported.contains(&file) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    imported.push(file.clone());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let mut import_file = fs::read_to_string(file).expect(\"File not found\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    include_resolver(&mut import_file, imported);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    *line = String::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: remove the `!` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"usage of wildcard import for enum variants","code":{"code":"clippy::enum_glob_use","explanation":null},"level":"warning","spans":[{"file_name":"src/scanner.rs","byte_start":10879,"byte_end":10897,"line_start":354,"line_end":354,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use self::TokenType::*;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::enum-glob-use` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#enum_glob_use","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/scanner.rs","byte_start":10879,"byte_end":10897,"line_start":354,"line_end":354,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use self::TokenType::*;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":"self::TokenType::{And, Bang, BangEqual, Class, Comma, Const, Dot, Else, Eof, Equal, EqualEqual, Error, False, For, Fun, Greater, GreaterEqual, Identifier, If, Input, LeftBrace, LeftBracket, LeftParen, Less, LessEqual, LessPipe, Minus, MinusEqual, MinusMinus, Nil, Number, Or, Plus, PlusEqual, PlusPlus, Print, RString, Rem, Return, RightBrace, RightBracket, RightParen, Semicolon, Slash, SlashEqual, Star, StarEqual, Super, This, True, Var, While}","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of wildcard import for enum variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/scanner.rs:354:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m354\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse self::TokenType::*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `self::TokenType::{And, Bang, BangEqual, Class, Comma, Const, Dot, Else, Eof, Equal, EqualEqual, Error, False, For, Fun, Greater, GreaterEqual, Identifier, If, Input, LeftBrace, LeftBracket, LeftParen, Less, LessEqual, LessPipe, Minus, MinusEqual, MinusMinus, Nil, Number, Or, Plus, PlusEqual, PlusPlus, Print, RString, Rem, Return, RightBrace, RightBracket, RightParen, Semicolon, Slash, SlashEqual, Star, StarEqual, Super, This, True, Var, While}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::enum-glob-use` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#enum_glob_use\u001b[0m\n\n"}
{"message":"usage of wildcard import","code":{"code":"clippy::wildcard_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":49,"byte_end":58,"line_start":3,"line_end":3,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    object::*,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":49,"byte_end":58,"line_start":3,"line_end":3,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    object::*,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":"object::{BoundMethod, Class, Closure, Function, Instance, NativeFn}","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of wildcard import\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    object::*,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `object::{BoundMethod, Class, Closure, Function, Instance, NativeFn}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports\u001b[0m\n\n"}
{"message":"this argument (1 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)","code":{"code":"clippy::trivially_copy_pass_by_ref","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":3403,"byte_end":3408,"line_start":118,"line_end":118,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"    pub fn next(&self) -> Self {","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::trivially-copy-pass-by-ref` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider passing by value instead","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":3403,"byte_end":3408,"line_start":118,"line_end":118,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"    pub fn next(&self) -> Self {","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":"self","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this argument (1 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:118:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn next(&self) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider passing by value instead: `self`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::trivially-copy-pass-by-ref` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\u001b[0m\n\n"}
{"message":"usage of wildcard import","code":{"code":"clippy::wildcard_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":125,"byte_end":134,"line_start":5,"line_end":5,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    object::*,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":125,"byte_end":134,"line_start":5,"line_end":5,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    object::*,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":"object::{BoundMethod, Class, Closure, Function, Instance, NativeFn, Upvalue}","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of wildcard import\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    object::*,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `object::{BoundMethod, Class, Closure, Function, Instance, NativeFn, Upvalue}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports\u001b[0m\n\n"}
{"message":"this function has too many lines (545/100)","code":{"code":"clippy::too_many_lines","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":4577,"byte_end":31843,"line_start":145,"line_end":696,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    fn run(&mut self) -> Result<(), InterpretError> {","highlight_start":5,"highlight_end":54},{"text":"        loop {","highlight_start":1,"highlight_end":15},{"text":"            let instruction = self.current_chunk().get_opcode(self.current_frame().ip);","highlight_start":1,"highlight_end":88},{"text":"            if self.debug || cfg!(feature = \"debug_trace_execution\") {","highlight_start":1,"highlight_end":71},{"text":"                let disassembler =","highlight_start":1,"highlight_end":35},{"text":"                    Disassembler::new(&self.gc, self.current_chunk(), Some(&self.stack));","highlight_start":1,"highlight_end":90},{"text":"                disassembler.disassemble_instruction(&instruction, self.current_frame().ip);","highlight_start":1,"highlight_end":93},{"text":"                println!();","highlight_start":1,"highlight_end":28},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            self.current_frame_mut().ip += 1;","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            match instruction {","highlight_start":1,"highlight_end":32},{"text":"                OpCode::Add => match (self.pop(), self.pop()) {","highlight_start":1,"highlight_end":64},{"text":"                    (Value::Number(b), Value::Number(a)) => self.push(Value::Number(a + b))?,","highlight_start":1,"highlight_end":94},{"text":"                    (Value::VString(b), Value::VString(a)) => {","highlight_start":1,"highlight_end":64},{"text":"                        let a = self.gc.deref(a);","highlight_start":1,"highlight_end":50},{"text":"                        let b = self.gc.deref(b);","highlight_start":1,"highlight_end":50},{"text":"                        let new = format!(\"{}{}\", a, b);","highlight_start":1,"highlight_end":57},{"text":"                        let string = self.intern(new);","highlight_start":1,"highlight_end":55},{"text":"                        self.push(Value::VString(string))?","highlight_start":1,"highlight_end":59},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    (Value::VString(b), Value::Number(a)) => {","highlight_start":1,"highlight_end":63},{"text":"                        let b = self.gc.deref(b);","highlight_start":1,"highlight_end":50},{"text":"                        let new = format!(\"{}{}\", a, b);","highlight_start":1,"highlight_end":57},{"text":"                        let string = self.intern(new);","highlight_start":1,"highlight_end":55},{"text":"                        self.push(Value::VString(string))?","highlight_start":1,"highlight_end":59},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    (Value::Number(b), Value::VString(a)) => {","highlight_start":1,"highlight_end":63},{"text":"                        let a = self.gc.deref(a);","highlight_start":1,"highlight_end":50},{"text":"                        let new = format!(\"{}{}\", a, b);","highlight_start":1,"highlight_end":57},{"text":"                        let string = self.intern(new);","highlight_start":1,"highlight_end":55},{"text":"                        self.push(Value::VString(string))?","highlight_start":1,"highlight_end":59},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    (Value::Array(b), Value::Array(a)) => {","highlight_start":1,"highlight_end":60},{"text":"                        let a = self.gc.deref(a);","highlight_start":1,"highlight_end":50},{"text":"                        let b = self.gc.deref(b);","highlight_start":1,"highlight_end":50},{"text":"                        let mut c = a.clone();","highlight_start":1,"highlight_end":47},{"text":"                        c.extend(b);","highlight_start":1,"highlight_end":37},{"text":"                        let c = self.alloc(c);","highlight_start":1,"highlight_end":47},{"text":"                        self.push(Value::Array(c))?","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        return Err(self.runtime_error(","highlight_start":1,"highlight_end":55},{"text":"                            \"Arguments must be both numbers or at least one string.\",","highlight_start":1,"highlight_end":86},{"text":"                        ))","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                OpCode::BuildList(length) => {","highlight_start":1,"highlight_end":47},{"text":"                    let mut vec: Vec<Value> = Vec::new();","highlight_start":1,"highlight_end":58},{"text":"                    for _ in 0..length {","highlight_start":1,"highlight_end":41},{"text":"                        vec.push(self.pop());","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    vec.reverse();","highlight_start":1,"highlight_end":35},{"text":"                    let vec = self.gc.alloc(vec);","highlight_start":1,"highlight_end":50},{"text":"                    self.push(Value::Array(vec))?","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Call(arg_count) => self.call_value(self.peek(arg_count), arg_count)?,","highlight_start":1,"highlight_end":94},{"text":"                OpCode::Class(value) => {","highlight_start":1,"highlight_end":42},{"text":"                    if let Value::VString(name) = self.current_chunk().constants[value] {","highlight_start":1,"highlight_end":90},{"text":"                        let class = Class::new(name);","highlight_start":1,"highlight_end":54},{"text":"                        let class = self.alloc(class);","highlight_start":1,"highlight_end":55},{"text":"                        self.push(Value::Class(class))?","highlight_start":1,"highlight_end":56},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self","highlight_start":1,"highlight_end":40},{"text":"                            .runtime_error(\"Error: Invalid identifier found for usage on stack.\"));","highlight_start":1,"highlight_end":100},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::CloseUpvalue => {","highlight_start":1,"highlight_end":42},{"text":"                    self.close_upvalue(self.stack.len() - 1);","highlight_start":1,"highlight_end":62},{"text":"                    self.pop();","highlight_start":1,"highlight_end":32},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Closure(index) => match self.current_chunk().get_constant(index) {","highlight_start":1,"highlight_end":91},{"text":"                    Value::Function(function) => {","highlight_start":1,"highlight_end":51},{"text":"                        let upvalue_count = self.gc.deref(function).upvalues.len();","highlight_start":1,"highlight_end":84},{"text":"                        let mut closure = Closure::new(function);","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        for i in 0..upvalue_count {","highlight_start":1,"highlight_end":52},{"text":"                            let upvalue = self.gc.deref(function).upvalues[i];","highlight_start":1,"highlight_end":79},{"text":"                            let value = if upvalue.is_local {","highlight_start":1,"highlight_end":62},{"text":"                                self.capture_upvalue(self.current_frame().slot + upvalue.index)","highlight_start":1,"highlight_end":96},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                self.current_closure().upvalues[upvalue.index]","highlight_start":1,"highlight_end":79},{"text":"                            };","highlight_start":1,"highlight_end":31},{"text":"                            closure.upvalues.push(value);","highlight_start":1,"highlight_end":58},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        let closure = self.alloc(closure);","highlight_start":1,"highlight_end":59},{"text":"                        self.push(Value::Closure(closure))?","highlight_start":1,"highlight_end":60},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    _ => return Err(self.runtime_error(\"Error: no function found.\")),","highlight_start":1,"highlight_end":86},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                OpCode::Constant(index) => self.push(self.current_chunk().get_constant(index))?,","highlight_start":1,"highlight_end":97},{"text":"                OpCode::DecrementGlobal(index) => {","highlight_start":1,"highlight_end":52},{"text":"                    if let Value::VString(string_ref) = self.current_chunk().get_constant(index) {","highlight_start":1,"highlight_end":99},{"text":"                        match self.globals.get(&string_ref) {","highlight_start":1,"highlight_end":62},{"text":"                            Some(&value) => {","highlight_start":1,"highlight_end":46},{"text":"                                if let Value::Number(v) = value {","highlight_start":1,"highlight_end":66},{"text":"                                    let val = Value::Number(v - 1.0);","highlight_start":1,"highlight_end":70},{"text":"                                    self.push(val)?;","highlight_start":1,"highlight_end":53},{"text":"                                    self.globals.insert(string_ref, val);","highlight_start":1,"highlight_end":74},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    return Err(self.runtime_error(","highlight_start":1,"highlight_end":67},{"text":"                                        \"Only numeric variables can be incremented.\",","highlight_start":1,"highlight_end":86},{"text":"                                    ));","highlight_start":1,"highlight_end":40},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                return Err(self.runtime_error(&format!(","highlight_start":1,"highlight_end":72},{"text":"                                    \"Undefined variable '{}'.\",","highlight_start":1,"highlight_end":64},{"text":"                                    self.gc.deref(string_ref)","highlight_start":1,"highlight_end":62},{"text":"                                )))","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self","highlight_start":1,"highlight_end":40},{"text":"                            .runtime_error(\"Error: Invalid identifier found for usage on stack.\"));","highlight_start":1,"highlight_end":100},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::DecrementLocal(slot) => {","highlight_start":1,"highlight_end":50},{"text":"                    let index = slot + self.current_frame().slot;","highlight_start":1,"highlight_end":66},{"text":"                    if let Value::Number(value) = self.stack[index] {","highlight_start":1,"highlight_end":70},{"text":"                        let value = Value::Number(value - 1.0);","highlight_start":1,"highlight_end":64},{"text":"                        self.stack[index] = value;","highlight_start":1,"highlight_end":51},{"text":"                        self.push(value)?;","highlight_start":1,"highlight_end":43},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self.runtime_error(\"Only number can be incremented.\"));","highlight_start":1,"highlight_end":91},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::DecrementUpvalue(slot) => {","highlight_start":1,"highlight_end":52},{"text":"                    let upvalue = self.current_closure().upvalues[slot];","highlight_start":1,"highlight_end":73},{"text":"                    let value = {","highlight_start":1,"highlight_end":34},{"text":"                        let upvalue = self.gc.deref(upvalue);","highlight_start":1,"highlight_end":62},{"text":"                        let temp = if let Some(value) = upvalue.closed {","highlight_start":1,"highlight_end":73},{"text":"                            value","highlight_start":1,"highlight_end":34},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            self.stack[upvalue.location]","highlight_start":1,"highlight_end":57},{"text":"                        };","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        if let Value::Number(val) = temp {","highlight_start":1,"highlight_end":59},{"text":"                            Value::Number(val - 1.0)","highlight_start":1,"highlight_end":53},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(self.runtime_error(\"Only numbers can be incremented.\"));","highlight_start":1,"highlight_end":96},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    let mut upvalue = self.gc.deref_mut(upvalue);","highlight_start":1,"highlight_end":66},{"text":"                    if upvalue.closed.is_none() {","highlight_start":1,"highlight_end":50},{"text":"                        self.stack[upvalue.location] = value;","highlight_start":1,"highlight_end":62},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        upvalue.closed = Some(value);","highlight_start":1,"highlight_end":54},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    self.push(value)?;","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::DefineGlobal(index) => {","highlight_start":1,"highlight_end":49},{"text":"                    if let Value::VString(string_ref) = self.current_chunk().constants[index] {","highlight_start":1,"highlight_end":96},{"text":"                        self.globals.insert(string_ref, self.peek(0));","highlight_start":1,"highlight_end":71},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self.runtime_error(","highlight_start":1,"highlight_end":55},{"text":"                            \"Error: Invalid identifier found for definition on stack.\",","highlight_start":1,"highlight_end":88},{"text":"                        ));","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Div => self.bin_arith_op(|x, y| x / y, \"when dividing\")?,","highlight_start":1,"highlight_end":82},{"text":"                OpCode::Equal => self.bin_bool_op(|x, y| x == y)?,","highlight_start":1,"highlight_end":67},{"text":"                OpCode::False => {","highlight_start":1,"highlight_end":35},{"text":"                    self.push(Value::Bool(false))?;","highlight_start":1,"highlight_end":52},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::GetIndexArray => {","highlight_start":1,"highlight_end":43},{"text":"                    let index = self.pop_number(\"for indexing an array.\")?;","highlight_start":1,"highlight_end":76},{"text":"                    if index.fract() != 0.0 {","highlight_start":1,"highlight_end":46},{"text":"                        return Err(","highlight_start":1,"highlight_end":36},{"text":"                            self.runtime_error(\"Can't index an array with a fractional number.\")","highlight_start":1,"highlight_end":97},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if let Value::Array(array) = self.pop() {","highlight_start":1,"highlight_end":62},{"text":"                        let array = self.gc.deref(array);","highlight_start":1,"highlight_end":58},{"text":"                        let value = array[index as usize];","highlight_start":1,"highlight_end":59},{"text":"                        self.push(value)?","highlight_start":1,"highlight_end":42},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(","highlight_start":1,"highlight_end":36},{"text":"                            self.runtime_error(\"No array found on stack when indexing an array.\")","highlight_start":1,"highlight_end":98},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::GetGlobal(index) => {","highlight_start":1,"highlight_end":46},{"text":"                    if let Value::VString(string_ref) = self.current_chunk().get_constant(index) {","highlight_start":1,"highlight_end":99},{"text":"                        match self.globals.get(&string_ref) {","highlight_start":1,"highlight_end":62},{"text":"                            Some(&value) => self.push(value)?,","highlight_start":1,"highlight_end":63},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                return Err(self.runtime_error(&format!(","highlight_start":1,"highlight_end":72},{"text":"                                    \"Undefined variable '{}'.\",","highlight_start":1,"highlight_end":64},{"text":"                                    self.gc.deref(string_ref)","highlight_start":1,"highlight_end":62},{"text":"                                )))","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self","highlight_start":1,"highlight_end":40},{"text":"                            .runtime_error(\"Error: Invalid identifier found for usage on stack.\"));","highlight_start":1,"highlight_end":100},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::GetLocal(slot) => {","highlight_start":1,"highlight_end":44},{"text":"                    self.push(self.stack[slot + self.current_frame().slot])?;","highlight_start":1,"highlight_end":78},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::GetProperty(slot) => {","highlight_start":1,"highlight_end":47},{"text":"                    if let Value::Instance(instance) = self.peek(0) {","highlight_start":1,"highlight_end":70},{"text":"                        let instance = self.gc.deref(instance);","highlight_start":1,"highlight_end":64},{"text":"                        if let Value::VString(name) = self.current_chunk().get_constant(slot) {","highlight_start":1,"highlight_end":96},{"text":"                            let value = instance.fields.get(&name);","highlight_start":1,"highlight_end":68},{"text":"                            if let Some(&value) = value {","highlight_start":1,"highlight_end":58},{"text":"                                self.pop();","highlight_start":1,"highlight_end":44},{"text":"                                self.push(value)?","highlight_start":1,"highlight_end":50},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                let class = instance.class;","highlight_start":1,"highlight_end":60},{"text":"                                self.bind_method(class, name)?;","highlight_start":1,"highlight_end":64},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(self.runtime_error(","highlight_start":1,"highlight_end":59},{"text":"                                \"Error: Invalid identifier found for usage on stack.\",","highlight_start":1,"highlight_end":87},{"text":"                            ));","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self.runtime_error(\"Only instances have properties.\"));","highlight_start":1,"highlight_end":91},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::GetSuper(slot) => {","highlight_start":1,"highlight_end":44},{"text":"                    if let Value::VString(name) = self.current_chunk().get_constant(slot) {","highlight_start":1,"highlight_end":92},{"text":"                        if let Value::Class(superclass) = self.pop() {","highlight_start":1,"highlight_end":71},{"text":"                            self.bind_method(superclass, name)?","highlight_start":1,"highlight_end":64},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(self.runtime_error(\"No superclass found on the stack\"));","highlight_start":1,"highlight_end":96},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self","highlight_start":1,"highlight_end":40},{"text":"                            .runtime_error(\"Error: Invalid identifier found for usage on stack.\"));","highlight_start":1,"highlight_end":100},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::GetUpvalue(slot) => {","highlight_start":1,"highlight_end":46},{"text":"                    let value = {","highlight_start":1,"highlight_end":34},{"text":"                        let upvalue = self.current_closure().upvalues[slot];","highlight_start":1,"highlight_end":77},{"text":"                        let upvalue = self.gc.deref(upvalue);","highlight_start":1,"highlight_end":62},{"text":"                        if let Some(value) = upvalue.closed {","highlight_start":1,"highlight_end":62},{"text":"                            value","highlight_start":1,"highlight_end":34},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            self.stack[upvalue.location]","highlight_start":1,"highlight_end":57},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    self.push(value)?","highlight_start":1,"highlight_end":38},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Greater => match (self.pop(), self.pop()) {","highlight_start":1,"highlight_end":68},{"text":"                    (Value::Number(b), Value::Number(a)) => self.push(Value::Bool(a > b))?,","highlight_start":1,"highlight_end":92},{"text":"                    (Value::VString(b), Value::VString(a)) => {","highlight_start":1,"highlight_end":64},{"text":"                        let a = self.gc.deref(a);","highlight_start":1,"highlight_end":50},{"text":"                        let b = self.gc.deref(b);","highlight_start":1,"highlight_end":50},{"text":"                        let result = Value::Bool(a > b);","highlight_start":1,"highlight_end":57},{"text":"                        self.push(result)?","highlight_start":1,"highlight_end":43},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        return Err(","highlight_start":1,"highlight_end":36},{"text":"                            self.runtime_error(\"Arguments must be of same type and comparable.\")","highlight_start":1,"highlight_end":97},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                OpCode::GreaterEqual => match (self.pop(), self.pop()) {","highlight_start":1,"highlight_end":73},{"text":"                    (Value::Number(b), Value::Number(a)) => self.push(Value::Bool(a >= b))?,","highlight_start":1,"highlight_end":93},{"text":"                    (Value::VString(b), Value::VString(a)) => {","highlight_start":1,"highlight_end":64},{"text":"                        let a = self.gc.deref(a);","highlight_start":1,"highlight_end":50},{"text":"                        let b = self.gc.deref(b);","highlight_start":1,"highlight_end":50},{"text":"                        let result = Value::Bool(a >= b);","highlight_start":1,"highlight_end":58},{"text":"                        self.push(result)?","highlight_start":1,"highlight_end":43},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        return Err(","highlight_start":1,"highlight_end":36},{"text":"                            self.runtime_error(\"Arguments must be of same type and comparable.\")","highlight_start":1,"highlight_end":97},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                OpCode::IncrementGlobal(index) => {","highlight_start":1,"highlight_end":52},{"text":"                    if let Value::VString(string_ref) = self.current_chunk().get_constant(index) {","highlight_start":1,"highlight_end":99},{"text":"                        match self.globals.get(&string_ref) {","highlight_start":1,"highlight_end":62},{"text":"                            Some(&value) => {","highlight_start":1,"highlight_end":46},{"text":"                                if let Value::Number(v) = value {","highlight_start":1,"highlight_end":66},{"text":"                                    let val = Value::Number(v + 1.0);","highlight_start":1,"highlight_end":70},{"text":"                                    self.push(val)?;","highlight_start":1,"highlight_end":53},{"text":"                                    self.globals.insert(string_ref, val);","highlight_start":1,"highlight_end":74},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    return Err(self.runtime_error(","highlight_start":1,"highlight_end":67},{"text":"                                        \"Only numeric variables can be incremented.\",","highlight_start":1,"highlight_end":86},{"text":"                                    ));","highlight_start":1,"highlight_end":40},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                return Err(self.runtime_error(&format!(","highlight_start":1,"highlight_end":72},{"text":"                                    \"Undefined variable '{}'.\",","highlight_start":1,"highlight_end":64},{"text":"                                    self.gc.deref(string_ref)","highlight_start":1,"highlight_end":62},{"text":"                                )))","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self","highlight_start":1,"highlight_end":40},{"text":"                            .runtime_error(\"Error: Invalid identifier found for usage on stack.\"));","highlight_start":1,"highlight_end":100},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::IncrementLocal(slot) => {","highlight_start":1,"highlight_end":50},{"text":"                    let index = slot + self.current_frame().slot;","highlight_start":1,"highlight_end":66},{"text":"                    if let Value::Number(value) = self.stack[index] {","highlight_start":1,"highlight_end":70},{"text":"                        let value = Value::Number(value + 1.0);","highlight_start":1,"highlight_end":64},{"text":"                        self.stack[index] = value;","highlight_start":1,"highlight_end":51},{"text":"                        self.push(value)?;","highlight_start":1,"highlight_end":43},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self.runtime_error(\"Only number can be incremented.\"));","highlight_start":1,"highlight_end":91},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::IncrementUpvalue(slot) => {","highlight_start":1,"highlight_end":52},{"text":"                    let upvalue = self.current_closure().upvalues[slot];","highlight_start":1,"highlight_end":73},{"text":"                    let value = {","highlight_start":1,"highlight_end":34},{"text":"                        let upvalue = self.gc.deref(upvalue);","highlight_start":1,"highlight_end":62},{"text":"                        let temp = if let Some(value) = upvalue.closed {","highlight_start":1,"highlight_end":73},{"text":"                            value","highlight_start":1,"highlight_end":34},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            self.stack[upvalue.location]","highlight_start":1,"highlight_end":57},{"text":"                        };","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        if let Value::Number(val) = temp {","highlight_start":1,"highlight_end":59},{"text":"                            Value::Number(val + 1.0)","highlight_start":1,"highlight_end":53},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(self.runtime_error(\"Only numbers can be incremented.\"));","highlight_start":1,"highlight_end":96},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    };","highlight_start":1,"highlight_end":23},{"text":"                    let mut upvalue = self.gc.deref_mut(upvalue);","highlight_start":1,"highlight_end":66},{"text":"                    if upvalue.closed.is_none() {","highlight_start":1,"highlight_end":50},{"text":"                        self.stack[upvalue.location] = value;","highlight_start":1,"highlight_end":62},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        upvalue.closed = Some(value);","highlight_start":1,"highlight_end":54},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    self.push(value)?;","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Inherit => {","highlight_start":1,"highlight_end":37},{"text":"                    let pair = (self.peek(0), self.peek(1));","highlight_start":1,"highlight_end":61},{"text":"                    if let (Value::Class(class), Value::Class(superclass)) = pair {","highlight_start":1,"highlight_end":84},{"text":"                        let superclass = self.gc.deref(superclass);","highlight_start":1,"highlight_end":68},{"text":"                        let methods = superclass.methods.clone();","highlight_start":1,"highlight_end":66},{"text":"                        let class = self.gc.deref_mut(class);","highlight_start":1,"highlight_end":62},{"text":"                        class.methods = methods;","highlight_start":1,"highlight_end":49},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self.runtime_error(\"Superclass must be a class.\"));","highlight_start":1,"highlight_end":87},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Input => {","highlight_start":1,"highlight_end":35},{"text":"                    let value = self.pop();","highlight_start":1,"highlight_end":44},{"text":"                    if self.repl {","highlight_start":1,"highlight_end":35},{"text":"                        print!(\">  {}\", GcTraceFormatter::new(value, &self.gc));","highlight_start":1,"highlight_end":81},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        print!(\"{}\", GcTraceFormatter::new(value, &self.gc));","highlight_start":1,"highlight_end":78},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    match io::stdout().flush() {","highlight_start":1,"highlight_end":49},{"text":"                        Ok(_) => {}","highlight_start":1,"highlight_end":36},{"text":"                        Err(_) => return Err(self.runtime_error(\"Error while printing\")),","highlight_start":1,"highlight_end":90},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    let mut buffer = String::new();","highlight_start":1,"highlight_end":52},{"text":"                    match io::stdin().read_line(&mut buffer) {","highlight_start":1,"highlight_end":63},{"text":"                        Err(_) => return Err(InterpretError::Runtime),","highlight_start":1,"highlight_end":71},{"text":"                        Ok(_) => {","highlight_start":1,"highlight_end":35},{"text":"                            buffer.truncate(buffer.len() - 1);","highlight_start":1,"highlight_end":63},{"text":"                            let string = self.intern(buffer);","highlight_start":1,"highlight_end":62},{"text":"                            self.push(Value::VString(string))?","highlight_start":1,"highlight_end":63},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Invoke((name, count)) => {","highlight_start":1,"highlight_end":51},{"text":"                    if let Value::VString(name) = self.current_chunk().get_constant(name) {","highlight_start":1,"highlight_end":92},{"text":"                        self.invoke(name, count)?","highlight_start":1,"highlight_end":50},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self","highlight_start":1,"highlight_end":40},{"text":"                            .runtime_error(\"Error: Invalid identifier found for usage on stack.\"));","highlight_start":1,"highlight_end":100},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Jump(offset) => {","highlight_start":1,"highlight_end":42},{"text":"                    self.current_frame_mut().ip += offset;","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::JumpIfFalse(offset) => {","highlight_start":1,"highlight_end":49},{"text":"                    if self.peek(0).is_false() {","highlight_start":1,"highlight_end":49},{"text":"                        self.current_frame_mut().ip += offset;","highlight_start":1,"highlight_end":63},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Less => match (self.pop(), self.pop()) {","highlight_start":1,"highlight_end":65},{"text":"                    (Value::Number(b), Value::Number(a)) => self.push(Value::Bool(a < b))?,","highlight_start":1,"highlight_end":92},{"text":"                    (Value::VString(b), Value::VString(a)) => {","highlight_start":1,"highlight_end":64},{"text":"                        let a = self.gc.deref(a);","highlight_start":1,"highlight_end":50},{"text":"                        let b = self.gc.deref(b);","highlight_start":1,"highlight_end":50},{"text":"                        let result = Value::Bool(a < b);","highlight_start":1,"highlight_end":57},{"text":"                        self.push(result)?","highlight_start":1,"highlight_end":43},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        return Err(","highlight_start":1,"highlight_end":36},{"text":"                            self.runtime_error(\"Arguments must be of same type and comparable.\")","highlight_start":1,"highlight_end":97},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                OpCode::LessEqual => match (self.pop(), self.pop()) {","highlight_start":1,"highlight_end":70},{"text":"                    (Value::Number(b), Value::Number(a)) => self.push(Value::Bool(a <= b))?,","highlight_start":1,"highlight_end":93},{"text":"                    (Value::VString(b), Value::VString(a)) => {","highlight_start":1,"highlight_end":64},{"text":"                        let a = self.gc.deref(a);","highlight_start":1,"highlight_end":50},{"text":"                        let b = self.gc.deref(b);","highlight_start":1,"highlight_end":50},{"text":"                        let result = Value::Bool(a <= b);","highlight_start":1,"highlight_end":58},{"text":"                        self.push(result)?","highlight_start":1,"highlight_end":43},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        return Err(","highlight_start":1,"highlight_end":36},{"text":"                            self.runtime_error(\"Arguments must be of same type and comparable.\")","highlight_start":1,"highlight_end":97},{"text":"                        )","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                OpCode::Loop(offset) => {","highlight_start":1,"highlight_end":42},{"text":"                    self.current_frame_mut().ip -= offset + 1;","highlight_start":1,"highlight_end":63},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Method(slot) => {","highlight_start":1,"highlight_end":42},{"text":"                    if let Value::VString(name) = self.current_chunk().get_constant(slot) {","highlight_start":1,"highlight_end":92},{"text":"                        self.define_method(name)?","highlight_start":1,"highlight_end":50},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self","highlight_start":1,"highlight_end":40},{"text":"                            .runtime_error(\"Error: Invalid identifier found for usage on stack.\"));","highlight_start":1,"highlight_end":100},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Rem => {","highlight_start":1,"highlight_end":33},{"text":"                    let (b, a) = (","highlight_start":1,"highlight_end":35},{"text":"                        self.pop_number(\"as divisor in rem\")?,","highlight_start":1,"highlight_end":63},{"text":"                        self.pop_number(\"as dividend in rem\")?,","highlight_start":1,"highlight_end":64},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                    if b.fract() == 0.0 && a.fract() == 0.0 {","highlight_start":1,"highlight_end":62},{"text":"                        let a = a as usize;","highlight_start":1,"highlight_end":44},{"text":"                        let b = b as usize;","highlight_start":1,"highlight_end":44},{"text":"                        let rem = a % b;","highlight_start":1,"highlight_end":41},{"text":"                        self.push(Value::Number(rem as f64))?","highlight_start":1,"highlight_end":62},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Mul => self.bin_arith_op(|x, y| x * y, \"when multiplying\")?,","highlight_start":1,"highlight_end":85},{"text":"                OpCode::Negate => {","highlight_start":1,"highlight_end":36},{"text":"                    let n = self.pop_number(\"to negate\")?;","highlight_start":1,"highlight_end":59},{"text":"                    self.push(Value::Number(-n))?","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Nil => self.push(Value::Nil)?,","highlight_start":1,"highlight_end":55},{"text":"                OpCode::Not => {","highlight_start":1,"highlight_end":33},{"text":"                    let value = self.pop().is_false();","highlight_start":1,"highlight_end":55},{"text":"                    self.push(Value::Bool(value))?","highlight_start":1,"highlight_end":51},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::NotEqual => self.bin_bool_op(|x, y| x != y)?,","highlight_start":1,"highlight_end":70},{"text":"                OpCode::Pop => {","highlight_start":1,"highlight_end":33},{"text":"                    self.pop();","highlight_start":1,"highlight_end":32},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Print => {","highlight_start":1,"highlight_end":35},{"text":"                    let value = self.pop();","highlight_start":1,"highlight_end":44},{"text":"                    if self.repl {","highlight_start":1,"highlight_end":35},{"text":"                        println!(\">  {}\", GcTraceFormatter::new(value, &self.gc));","highlight_start":1,"highlight_end":83},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        println!(\"{}\", GcTraceFormatter::new(value, &self.gc));","highlight_start":1,"highlight_end":80},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Return => {","highlight_start":1,"highlight_end":36},{"text":"                    let frame = self.frames.pop().unwrap();","highlight_start":1,"highlight_end":60},{"text":"                    let result = self.pop();","highlight_start":1,"highlight_end":45},{"text":"                    self.close_upvalue(frame.slot);","highlight_start":1,"highlight_end":52},{"text":"                    if self.frames.is_empty() {","highlight_start":1,"highlight_end":48},{"text":"                        return Ok(());","highlight_start":1,"highlight_end":39},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.stack.truncate(frame.slot);","highlight_start":1,"highlight_end":57},{"text":"                        self.push(result)?","highlight_start":1,"highlight_end":43},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::ReturnNil => {","highlight_start":1,"highlight_end":39},{"text":"                    let frame = self.frames.pop().unwrap();","highlight_start":1,"highlight_end":60},{"text":"                    self.close_upvalue(frame.slot);","highlight_start":1,"highlight_end":52},{"text":"                    if self.frames.is_empty() {","highlight_start":1,"highlight_end":48},{"text":"                        return Ok(());","highlight_start":1,"highlight_end":39},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.stack.truncate(frame.slot);","highlight_start":1,"highlight_end":57},{"text":"                        self.push(Value::Nil)?","highlight_start":1,"highlight_end":47},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::SetIndexArray => {","highlight_start":1,"highlight_end":43},{"text":"                    let value = self.pop();","highlight_start":1,"highlight_end":44},{"text":"                    let index = self.pop_number(\"for indexing an array\")?;","highlight_start":1,"highlight_end":75},{"text":"                    if let Value::Array(arrayref) = self.pop() {","highlight_start":1,"highlight_end":65},{"text":"                        let array = self.gc.deref_mut(arrayref);","highlight_start":1,"highlight_end":65},{"text":"                        array[index as usize] = value;","highlight_start":1,"highlight_end":55},{"text":"                        self.push(Value::Array(arrayref))?","highlight_start":1,"highlight_end":59},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self.runtime_error(\"No array found on stack when indexing.\"));","highlight_start":1,"highlight_end":98},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::SetGlobal(index) => {","highlight_start":1,"highlight_end":46},{"text":"                    if let Value::VString(string_ref) = self.current_chunk().constants[index] {","highlight_start":1,"highlight_end":96},{"text":"                        if self.globals.insert(string_ref, self.peek(0)).is_none() {","highlight_start":1,"highlight_end":85},{"text":"                            self.globals.remove(&string_ref);","highlight_start":1,"highlight_end":62},{"text":"                            return Err(self.runtime_error(&format!(","highlight_start":1,"highlight_end":68},{"text":"                                \"Undefined variable '{}'.\",","highlight_start":1,"highlight_end":60},{"text":"                                self.gc.deref(string_ref)","highlight_start":1,"highlight_end":58},{"text":"                            )));","highlight_start":1,"highlight_end":33},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self","highlight_start":1,"highlight_end":40},{"text":"                            .runtime_error(\"Error: Invalid identifier found for usage on stack.\"));","highlight_start":1,"highlight_end":100},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::SetLocal(slot) => {","highlight_start":1,"highlight_end":44},{"text":"                    let index = slot + self.current_frame().slot;","highlight_start":1,"highlight_end":66},{"text":"                    self.stack[index] = self.peek(0);","highlight_start":1,"highlight_end":54},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::SetProperty(slot) => {","highlight_start":1,"highlight_end":47},{"text":"                    if let Value::Instance(instance) = self.peek(1) {","highlight_start":1,"highlight_end":70},{"text":"                        if let Value::VString(name) = self.current_chunk().get_constant(slot) {","highlight_start":1,"highlight_end":96},{"text":"                            let value = self.pop();","highlight_start":1,"highlight_end":52},{"text":"                            let instance = self.gc.deref_mut(instance);","highlight_start":1,"highlight_end":72},{"text":"                            instance.fields.insert(name, value);","highlight_start":1,"highlight_end":65},{"text":"                            self.pop();","highlight_start":1,"highlight_end":40},{"text":"                            self.push(value)?","highlight_start":1,"highlight_end":46},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(self.runtime_error(","highlight_start":1,"highlight_end":59},{"text":"                                \"Error: Invalid identifier found for usage on stack.\",","highlight_start":1,"highlight_end":87},{"text":"                            ));","highlight_start":1,"highlight_end":32},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self.runtime_error(\"Only instances have fields.\"));","highlight_start":1,"highlight_end":87},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::SetUpvalue(slot) => {","highlight_start":1,"highlight_end":46},{"text":"                    let upvalue = self.current_closure().upvalues[slot];","highlight_start":1,"highlight_end":73},{"text":"                    let value = self.peek(0);","highlight_start":1,"highlight_end":46},{"text":"                    let mut upvalue = self.gc.deref_mut(upvalue);","highlight_start":1,"highlight_end":66},{"text":"                    if upvalue.closed.is_none() {","highlight_start":1,"highlight_end":50},{"text":"                        self.stack[upvalue.location] = value;","highlight_start":1,"highlight_end":62},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        upvalue.closed = Some(value);","highlight_start":1,"highlight_end":54},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::Sub => self.bin_arith_op(|x, y| x - y, \"when subtracting\")?,","highlight_start":1,"highlight_end":85},{"text":"                OpCode::SuperInvoke((name, count)) => {","highlight_start":1,"highlight_end":56},{"text":"                    if let Value::VString(name) = self.current_chunk().get_constant(name) {","highlight_start":1,"highlight_end":92},{"text":"                        if let Value::Class(class) = self.pop() {","highlight_start":1,"highlight_end":66},{"text":"                            self.invoke_from_class(class, name, count)?","highlight_start":1,"highlight_end":72},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(self.runtime_error(\"No class found on the stack.\"));","highlight_start":1,"highlight_end":92},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(self","highlight_start":1,"highlight_end":40},{"text":"                            .runtime_error(\"Error: Invalid identifier found for usage on stack.\"));","highlight_start":1,"highlight_end":100},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                OpCode::True => self.push(Value::Bool(true))?,","highlight_start":1,"highlight_end":63},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many lines (545/100)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:145:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn run(&mut self) -> Result<(), InterpretError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let instruction = self.current_chunk().get_opcode(self.current_frame().ip);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if self.debug || cfg!(feature = \"debug_trace_execution\") {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m695\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m696\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":5619,"byte_end":5653,"line_start":165,"line_end":165,"column_start":25,"column_end":59,"is_primary":true,"text":[{"text":"                        self.push(Value::VString(string))?","highlight_start":25,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":5619,"byte_end":5653,"line_start":165,"line_end":165,"column_start":25,"column_end":59,"is_primary":true,"text":[{"text":"                        self.push(Value::VString(string))?","highlight_start":25,"highlight_end":59}],"label":null,"suggested_replacement":"self.push(Value::VString(string))?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:165:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(Value::VString(string))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(Value::VString(string))?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":5931,"byte_end":5965,"line_start":171,"line_end":171,"column_start":25,"column_end":59,"is_primary":true,"text":[{"text":"                        self.push(Value::VString(string))?","highlight_start":25,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":5931,"byte_end":5965,"line_start":171,"line_end":171,"column_start":25,"column_end":59,"is_primary":true,"text":[{"text":"                        self.push(Value::VString(string))?","highlight_start":25,"highlight_end":59}],"label":null,"suggested_replacement":"self.push(Value::VString(string))?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:171:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(Value::VString(string))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(Value::VString(string))?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":6243,"byte_end":6277,"line_start":177,"line_end":177,"column_start":25,"column_end":59,"is_primary":true,"text":[{"text":"                        self.push(Value::VString(string))?","highlight_start":25,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":6243,"byte_end":6277,"line_start":177,"line_end":177,"column_start":25,"column_end":59,"is_primary":true,"text":[{"text":"                        self.push(Value::VString(string))?","highlight_start":25,"highlight_end":59}],"label":null,"suggested_replacement":"self.push(Value::VString(string))?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:177:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(Value::VString(string))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(Value::VString(string))?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":6623,"byte_end":6650,"line_start":185,"line_end":185,"column_start":25,"column_end":52,"is_primary":true,"text":[{"text":"                        self.push(Value::Array(c))?","highlight_start":25,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":6623,"byte_end":6650,"line_start":185,"line_end":185,"column_start":25,"column_end":52,"is_primary":true,"text":[{"text":"                        self.push(Value::Array(c))?","highlight_start":25,"highlight_end":52}],"label":null,"suggested_replacement":"self.push(Value::Array(c))?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:185:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(Value::Array(c))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(Value::Array(c))?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":7243,"byte_end":7272,"line_start":200,"line_end":200,"column_start":21,"column_end":50,"is_primary":true,"text":[{"text":"                    self.push(Value::Array(vec))?","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":7243,"byte_end":7272,"line_start":200,"line_end":200,"column_start":21,"column_end":50,"is_primary":true,"text":[{"text":"                    self.push(Value::Array(vec))?","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":"self.push(Value::Array(vec))?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:200:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.push(Value::Array(vec))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(Value::Array(vec))?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":7657,"byte_end":7688,"line_start":207,"line_end":207,"column_start":25,"column_end":56,"is_primary":true,"text":[{"text":"                        self.push(Value::Class(class))?","highlight_start":25,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":7657,"byte_end":7688,"line_start":207,"line_end":207,"column_start":25,"column_end":56,"is_primary":true,"text":[{"text":"                        self.push(Value::Class(class))?","highlight_start":25,"highlight_end":56}],"label":null,"suggested_replacement":"self.push(Value::Class(class))?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:207:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(Value::Class(class))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(Value::Class(class))?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":8973,"byte_end":9008,"line_start":232,"line_end":232,"column_start":25,"column_end":60,"is_primary":true,"text":[{"text":"                        self.push(Value::Closure(closure))?","highlight_start":25,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":8973,"byte_end":9008,"line_start":232,"line_end":232,"column_start":25,"column_end":60,"is_primary":true,"text":[{"text":"                        self.push(Value::Closure(closure))?","highlight_start":25,"highlight_end":60}],"label":null,"suggested_replacement":"self.push(Value::Closure(closure))?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:232:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(Value::Closure(closure))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(Value::Closure(closure))?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":13556,"byte_end":13573,"line_start":322,"line_end":322,"column_start":25,"column_end":42,"is_primary":true,"text":[{"text":"                        self.push(value)?","highlight_start":25,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":13556,"byte_end":13573,"line_start":322,"line_end":322,"column_start":25,"column_end":42,"is_primary":true,"text":[{"text":"                        self.push(value)?","highlight_start":25,"highlight_end":42}],"label":null,"suggested_replacement":"self.push(value)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:322:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m322\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(value)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(value)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"casting `f64` to `usize` may truncate the value","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":13514,"byte_end":13528,"line_start":321,"line_end":321,"column_start":43,"column_end":57,"is_primary":true,"text":[{"text":"                        let value = array[index as usize];","highlight_start":43,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `usize` may truncate the value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:321:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m321\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        let value = array[index as usize];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\n"}
{"message":"casting `f64` to `usize` may lose the sign of the value","code":{"code":"clippy::cast_sign_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":13514,"byte_end":13528,"line_start":321,"line_end":321,"column_start":43,"column_end":57,"is_primary":true,"text":[{"text":"                        let value = array[index as usize];","highlight_start":43,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `usize` may lose the sign of the value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:321:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m321\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        let value = array[index as usize];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":15263,"byte_end":15280,"line_start":355,"line_end":355,"column_start":33,"column_end":50,"is_primary":true,"text":[{"text":"                                self.push(value)?","highlight_start":33,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":15263,"byte_end":15280,"line_start":355,"line_end":355,"column_start":33,"column_end":50,"is_primary":true,"text":[{"text":"                                self.push(value)?","highlight_start":33,"highlight_end":50}],"label":null,"suggested_replacement":"self.push(value)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:355:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m355\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   self.push(value)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(value)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":16121,"byte_end":16156,"line_start":372,"line_end":372,"column_start":29,"column_end":64,"is_primary":true,"text":[{"text":"                            self.bind_method(superclass, name)?","highlight_start":29,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":16121,"byte_end":16156,"line_start":372,"line_end":372,"column_start":29,"column_end":64,"is_primary":true,"text":[{"text":"                            self.bind_method(superclass, name)?","highlight_start":29,"highlight_end":64}],"label":null,"suggested_replacement":"self.bind_method(superclass, name)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:372:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m372\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   self.bind_method(superclass, name)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.bind_method(superclass, name)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":17014,"byte_end":17031,"line_start":391,"line_end":391,"column_start":21,"column_end":38,"is_primary":true,"text":[{"text":"                    self.push(value)?","highlight_start":21,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":17014,"byte_end":17031,"line_start":391,"line_end":391,"column_start":21,"column_end":38,"is_primary":true,"text":[{"text":"                    self.push(value)?","highlight_start":21,"highlight_end":38}],"label":null,"suggested_replacement":"self.push(value)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:391:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m391\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.push(value)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(value)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":17463,"byte_end":17481,"line_start":399,"line_end":399,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"                        self.push(result)?","highlight_start":25,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":17463,"byte_end":17481,"line_start":399,"line_end":399,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"                        self.push(result)?","highlight_start":25,"highlight_end":43}],"label":null,"suggested_replacement":"self.push(result)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:399:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(result)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(result)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":18157,"byte_end":18175,"line_start":413,"line_end":413,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"                        self.push(result)?","highlight_start":25,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":18157,"byte_end":18175,"line_start":413,"line_end":413,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"                        self.push(result)?","highlight_start":25,"highlight_end":43}],"label":null,"suggested_replacement":"self.push(result)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:413:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m413\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(result)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(result)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`","code":{"code":"clippy::single_match_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":22666,"byte_end":23057,"line_start":505,"line_end":512,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    match io::stdin().read_line(&mut buffer) {","highlight_start":21,"highlight_end":63},{"text":"                        Err(_) => return Err(InterpretError::Runtime),","highlight_start":1,"highlight_end":71},{"text":"                        Ok(_) => {","highlight_start":1,"highlight_end":35},{"text":"                            buffer.truncate(buffer.len() - 1);","highlight_start":1,"highlight_end":63},{"text":"                            let string = self.intern(buffer);","highlight_start":1,"highlight_end":62},{"text":"                            self.push(Value::VString(string))?","highlight_start":1,"highlight_end":63},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::single-match-else` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":22666,"byte_end":23057,"line_start":505,"line_end":512,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    match io::stdin().read_line(&mut buffer) {","highlight_start":21,"highlight_end":63},{"text":"                        Err(_) => return Err(InterpretError::Runtime),","highlight_start":1,"highlight_end":71},{"text":"                        Ok(_) => {","highlight_start":1,"highlight_end":35},{"text":"                            buffer.truncate(buffer.len() - 1);","highlight_start":1,"highlight_end":63},{"text":"                            let string = self.intern(buffer);","highlight_start":1,"highlight_end":62},{"text":"                            self.push(Value::VString(string))?","highlight_start":1,"highlight_end":63},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":"if let Err(_) = io::stdin().read_line(&mut buffer) { return Err(InterpretError::Runtime) } else {\n                        buffer.truncate(buffer.len() - 1);\n                        let string = self.intern(buffer);\n                        self.push(Value::VString(string))?\n                    }","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:505:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    match io::stdin().read_line(&mut buffer) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m506\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Err(_) => return Err(InterpretError::Runtime),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Ok(_) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            buffer.truncate(buffer.len() - 1);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::single-match-else` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;10mif let Err(_) = io::stdin().read_line(&mut buffer) { return Err(InterpretError::Runtime) } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m506\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         buffer.truncate(buffer.len() - 1);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         let string = self.intern(buffer);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         self.push(Value::VString(string))?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m509\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":22973,"byte_end":23007,"line_start":510,"line_end":510,"column_start":29,"column_end":63,"is_primary":true,"text":[{"text":"                            self.push(Value::VString(string))?","highlight_start":29,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":22973,"byte_end":23007,"line_start":510,"line_end":510,"column_start":29,"column_end":63,"is_primary":true,"text":[{"text":"                            self.push(Value::VString(string))?","highlight_start":29,"highlight_end":63}],"label":null,"suggested_replacement":"self.push(Value::VString(string))?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:510:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m510\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   self.push(Value::VString(string))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(Value::VString(string))?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":23247,"byte_end":23272,"line_start":516,"line_end":516,"column_start":25,"column_end":50,"is_primary":true,"text":[{"text":"                        self.invoke(name, count)?","highlight_start":25,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":23247,"byte_end":23272,"line_start":516,"line_end":516,"column_start":25,"column_end":50,"is_primary":true,"text":[{"text":"                        self.invoke(name, count)?","highlight_start":25,"highlight_end":50}],"label":null,"suggested_replacement":"self.invoke(name, count)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:516:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m516\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.invoke(name, count)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.invoke(name, count)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":24224,"byte_end":24242,"line_start":536,"line_end":536,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"                        self.push(result)?","highlight_start":25,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":24224,"byte_end":24242,"line_start":536,"line_end":536,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"                        self.push(result)?","highlight_start":25,"highlight_end":43}],"label":null,"suggested_replacement":"self.push(result)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:536:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m536\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(result)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(result)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":24915,"byte_end":24933,"line_start":550,"line_end":550,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"                        self.push(result)?","highlight_start":25,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":24915,"byte_end":24933,"line_start":550,"line_end":550,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"                        self.push(result)?","highlight_start":25,"highlight_end":43}],"label":null,"suggested_replacement":"self.push(result)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:550:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m550\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(result)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(result)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":25477,"byte_end":25502,"line_start":563,"line_end":563,"column_start":25,"column_end":50,"is_primary":true,"text":[{"text":"                        self.define_method(name)?","highlight_start":25,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":25477,"byte_end":25502,"line_start":563,"line_end":563,"column_start":25,"column_end":50,"is_primary":true,"text":[{"text":"                        self.define_method(name)?","highlight_start":25,"highlight_end":50}],"label":null,"suggested_replacement":"self.define_method(name)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:563:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.define_method(name)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.define_method(name)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":26160,"byte_end":26197,"line_start":578,"line_end":578,"column_start":25,"column_end":62,"is_primary":true,"text":[{"text":"                        self.push(Value::Number(rem as f64))?","highlight_start":25,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":26160,"byte_end":26197,"line_start":578,"line_end":578,"column_start":25,"column_end":62,"is_primary":true,"text":[{"text":"                        self.push(Value::Number(rem as f64))?","highlight_start":25,"highlight_end":62}],"label":null,"suggested_replacement":"self.push(Value::Number(rem as f64))?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:578:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m578\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(Value::Number(rem as f64))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(Value::Number(rem as f64))?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"casting `f64` to `usize` may truncate the value","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":26036,"byte_end":26046,"line_start":575,"line_end":575,"column_start":33,"column_end":43,"is_primary":true,"text":[{"text":"                        let a = a as usize;","highlight_start":33,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `usize` may truncate the value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:575:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        let a = a as usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\n"}
{"message":"casting `f64` to `usize` may lose the sign of the value","code":{"code":"clippy::cast_sign_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":26036,"byte_end":26046,"line_start":575,"line_end":575,"column_start":33,"column_end":43,"is_primary":true,"text":[{"text":"                        let a = a as usize;","highlight_start":33,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `usize` may lose the sign of the value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:575:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        let a = a as usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\u001b[0m\n\n"}
{"message":"casting `f64` to `usize` may truncate the value","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":26081,"byte_end":26091,"line_start":576,"line_end":576,"column_start":33,"column_end":43,"is_primary":true,"text":[{"text":"                        let b = b as usize;","highlight_start":33,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `usize` may truncate the value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:576:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        let b = b as usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\n"}
{"message":"casting `f64` to `usize` may lose the sign of the value","code":{"code":"clippy::cast_sign_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":26081,"byte_end":26091,"line_start":576,"line_end":576,"column_start":33,"column_end":43,"is_primary":true,"text":[{"text":"                        let b = b as usize;","highlight_start":33,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `usize` may lose the sign of the value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:576:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        let b = b as usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\u001b[0m\n\n"}
{"message":"casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)","code":{"code":"clippy::cast_precision_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":26184,"byte_end":26194,"line_start":578,"line_end":578,"column_start":49,"column_end":59,"is_primary":true,"text":[{"text":"                        self.push(Value::Number(rem as f64))?","highlight_start":49,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::cast-precision-loss` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:578:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m578\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(Value::Number(rem as f64))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::cast-precision-loss` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":26444,"byte_end":26473,"line_start":584,"line_end":584,"column_start":21,"column_end":50,"is_primary":true,"text":[{"text":"                    self.push(Value::Number(-n))?","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":26444,"byte_end":26473,"line_start":584,"line_end":584,"column_start":21,"column_end":50,"is_primary":true,"text":[{"text":"                    self.push(Value::Number(-n))?","highlight_start":21,"highlight_end":50}],"label":null,"suggested_replacement":"self.push(Value::Number(-n))?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:584:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.push(Value::Number(-n))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(Value::Number(-n))?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":26660,"byte_end":26690,"line_start":589,"line_end":589,"column_start":21,"column_end":51,"is_primary":true,"text":[{"text":"                    self.push(Value::Bool(value))?","highlight_start":21,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":26660,"byte_end":26690,"line_start":589,"line_end":589,"column_start":21,"column_end":51,"is_primary":true,"text":[{"text":"                    self.push(Value::Bool(value))?","highlight_start":21,"highlight_end":51}],"label":null,"suggested_replacement":"self.push(Value::Bool(value))?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:589:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m589\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    self.push(Value::Bool(value))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(Value::Bool(value))?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":27620,"byte_end":27638,"line_start":611,"line_end":611,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"                        self.push(result)?","highlight_start":25,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":27620,"byte_end":27638,"line_start":611,"line_end":611,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"                        self.push(result)?","highlight_start":25,"highlight_end":43}],"label":null,"suggested_replacement":"self.push(result)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:611:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m611\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(result)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(result)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":28037,"byte_end":28059,"line_start":621,"line_end":621,"column_start":25,"column_end":47,"is_primary":true,"text":[{"text":"                        self.push(Value::Nil)?","highlight_start":25,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":28037,"byte_end":28059,"line_start":621,"line_end":621,"column_start":25,"column_end":47,"is_primary":true,"text":[{"text":"                        self.push(Value::Nil)?","highlight_start":25,"highlight_end":47}],"label":null,"suggested_replacement":"self.push(Value::Nil)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:621:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m621\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(Value::Nil)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(Value::Nil)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":28480,"byte_end":28514,"line_start":630,"line_end":630,"column_start":25,"column_end":59,"is_primary":true,"text":[{"text":"                        self.push(Value::Array(arrayref))?","highlight_start":25,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":28480,"byte_end":28514,"line_start":630,"line_end":630,"column_start":25,"column_end":59,"is_primary":true,"text":[{"text":"                        self.push(Value::Array(arrayref))?","highlight_start":25,"highlight_end":59}],"label":null,"suggested_replacement":"self.push(Value::Array(arrayref))?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:630:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m630\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push(Value::Array(arrayref))?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(Value::Array(arrayref))?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"casting `f64` to `usize` may truncate the value","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":28430,"byte_end":28444,"line_start":629,"line_end":629,"column_start":31,"column_end":45,"is_primary":true,"text":[{"text":"                        array[index as usize] = value;","highlight_start":31,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `usize` may truncate the value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:629:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m629\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        array[index as usize] = value;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\n"}
{"message":"casting `f64` to `usize` may lose the sign of the value","code":{"code":"clippy::cast_sign_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":28430,"byte_end":28444,"line_start":629,"line_end":629,"column_start":31,"column_end":45,"is_primary":true,"text":[{"text":"                        array[index as usize] = value;","highlight_start":31,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `usize` may lose the sign of the value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:629:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m629\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        array[index as usize] = value;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":30107,"byte_end":30124,"line_start":660,"line_end":660,"column_start":29,"column_end":46,"is_primary":true,"text":[{"text":"                            self.push(value)?","highlight_start":29,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":30107,"byte_end":30124,"line_start":660,"line_end":660,"column_start":29,"column_end":46,"is_primary":true,"text":[{"text":"                            self.push(value)?","highlight_start":29,"highlight_end":46}],"label":null,"suggested_replacement":"self.push(value)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:660:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m660\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   self.push(value)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.push(value)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"consider adding a `;` to the last statement for consistent formatting","code":{"code":"clippy::semicolon_if_nothing_returned","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":31335,"byte_end":31378,"line_start":684,"line_end":684,"column_start":29,"column_end":72,"is_primary":true,"text":[{"text":"                            self.invoke_from_class(class, name, count)?","highlight_start":29,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add a `;` here","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":31335,"byte_end":31378,"line_start":684,"line_end":684,"column_start":29,"column_end":72,"is_primary":true,"text":[{"text":"                            self.invoke_from_class(class, name, count)?","highlight_start":29,"highlight_end":72}],"label":null,"suggested_replacement":"self.invoke_from_class(class, name, count)?;","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: consider adding a `;` to the last statement for consistent formatting\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:684:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m684\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   self.invoke_from_class(class, name, count)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: add a `;` here: `self.invoke_from_class(class, name, count)?;`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\u001b[0m\n\n"}
{"message":"this expression creates a reference which is immediately dereferenced by the compiler","code":{"code":"clippy::needless_borrow","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":32836,"byte_end":32841,"line_start":724,"line_end":724,"column_start":65,"column_end":70,"is_primary":true,"text":[{"text":"            let name = if name.is_empty() { \"<script>\" } else { &name };","highlight_start":65,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::needless_borrow)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":32836,"byte_end":32841,"line_start":724,"line_end":724,"column_start":65,"column_end":70,"is_primary":true,"text":[{"text":"            let name = if name.is_empty() { \"<script>\" } else { &name };","highlight_start":65,"highlight_end":70}],"label":null,"suggested_replacement":"name","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this expression creates a reference which is immediately dereferenced by the compiler\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:724:65\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let name = if name.is_empty() { \"<script>\" } else { &name };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: change this to: `name`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::needless_borrow)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":34964,"byte_end":35234,"line_start":786,"line_end":791,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                        if arg_count != 0 {","highlight_start":25,"highlight_end":44},{"text":"                            let msg = format!(\"Expected 0 arguments but got {}.\", arg_count);","highlight_start":1,"highlight_end":94},{"text":"                            Err(self.runtime_error(&msg))","highlight_start":1,"highlight_end":58},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:786:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m786\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m787\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            let msg = format!(\"Expected 0 arguments but got {}.\", arg_count);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m788\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Err(self.runtime_error(&msg))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m789\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":35980,"byte_end":36370,"line_start":810,"line_end":820,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if function.arity != arg_count {","highlight_start":9,"highlight_end":41},{"text":"            let msg = format!(","highlight_start":1,"highlight_end":31},{"text":"                \"Expected {} arguments but got {}.\",","highlight_start":1,"highlight_end":53},{"text":"                function.arity, arg_count","highlight_start":1,"highlight_end":42},{"text":"            );","highlight_start":1,"highlight_end":15},{"text":"            Err(self.runtime_error(&msg))","highlight_start":1,"highlight_end":42},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            let frame = CallFrame::new(callee, self.stack.len() - arg_count - 1);","highlight_start":1,"highlight_end":82},{"text":"            self.frames.push(frame);","highlight_start":1,"highlight_end":37},{"text":"            Ok(())","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:810:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m810\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if function.arity != arg_count {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m811\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let msg = format!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m812\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                \"Expected {} arguments but got {}.\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m813\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                function.arity, arg_count\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m819\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m820\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"this function has too many lines (339/100)","code":{"code":"clippy::too_many_lines","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":38719,"byte_end":54480,"line_start":890,"line_end":1230,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    fn invoke(&mut self, name: GcRef<String>, arg_count: usize) -> Result<(), InterpretError> {","highlight_start":5,"highlight_end":96},{"text":"        let receiver = self.peek(arg_count);","highlight_start":1,"highlight_end":45},{"text":"        let method_name = self.gc.deref(name).clone();","highlight_start":1,"highlight_end":55},{"text":"        if method_name == \"copy\" {","highlight_start":1,"highlight_end":35},{"text":"            if arg_count != 0 {","highlight_start":1,"highlight_end":32},{"text":"                Err(self.runtime_error(\"Copy requires only one argument.\"))","highlight_start":1,"highlight_end":76},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                let to_push = match receiver {","highlight_start":1,"highlight_end":47},{"text":"                    Value::Array(value) => {","highlight_start":1,"highlight_end":45},{"text":"                        let new = self.gc.deref(value).clone();","highlight_start":1,"highlight_end":64},{"text":"                        let new = self.alloc(new);","highlight_start":1,"highlight_end":51},{"text":"                        Value::Array(new)","highlight_start":1,"highlight_end":42},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Value::Instance(value) => {","highlight_start":1,"highlight_end":48},{"text":"                        let new = self.gc.deref(value).clone();","highlight_start":1,"highlight_end":64},{"text":"                        let new = self.alloc(new);","highlight_start":1,"highlight_end":51},{"text":"                        Value::Instance(new)","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        return Err(self.runtime_error(&format!(","highlight_start":1,"highlight_end":64},{"text":"                            \"Function copy is not defined for {}\",","highlight_start":1,"highlight_end":67},{"text":"                            receiver.type_of()","highlight_start":1,"highlight_end":47},{"text":"                        )))","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                self.pop();","highlight_start":1,"highlight_end":28},{"text":"                self.push(to_push)","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else if let Value::VString(string) = receiver {","highlight_start":1,"highlight_end":58},{"text":"            match method_name","highlight_start":1,"highlight_end":30},{"text":"                .chars()","highlight_start":1,"highlight_end":25},{"text":"                .next()","highlight_start":1,"highlight_end":24},{"text":"                .expect(\"Method contains no characters\")","highlight_start":1,"highlight_end":57},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                'i' => match method_name.chars().nth(1) {","highlight_start":1,"highlight_end":58},{"text":"                    Some('s') => match method_name.chars().nth(2) {","highlight_start":1,"highlight_end":68},{"text":"                        Some('A') => {","highlight_start":1,"highlight_end":39},{"text":"                            if method_name == \"isAlpha\" {","highlight_start":1,"highlight_end":58},{"text":"                                if arg_count != 0 {","highlight_start":1,"highlight_end":52},{"text":"                                    Err(self.runtime_error(\"isAlpha requires no arguments.\"))","highlight_start":1,"highlight_end":94},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    self.pop();","highlight_start":1,"highlight_end":48},{"text":"                                    self.push(Value::Bool(","highlight_start":1,"highlight_end":59},{"text":"                                        self.gc.deref(string).chars().all(char::is_alphabetic),","highlight_start":1,"highlight_end":96},{"text":"                                    ))","highlight_start":1,"highlight_end":39},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else if method_name == \"isAlphanumeric\" {","highlight_start":1,"highlight_end":72},{"text":"                                if arg_count != 0 {","highlight_start":1,"highlight_end":52},{"text":"                                    Err(self.runtime_error(\"isAlphaNumeric requires no arguments.\"))","highlight_start":1,"highlight_end":101},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    self.pop();","highlight_start":1,"highlight_end":48},{"text":"                                    self.push(Value::Bool(","highlight_start":1,"highlight_end":59},{"text":"                                        self.gc.deref(string).chars().all(char::is_alphanumeric),","highlight_start":1,"highlight_end":98},{"text":"                                    ))","highlight_start":1,"highlight_end":39},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                Err(self.runtime_error(&format!(","highlight_start":1,"highlight_end":65},{"text":"                                    \"String doesn't have {} as method.\",","highlight_start":1,"highlight_end":73},{"text":"                                    method_name","highlight_start":1,"highlight_end":48},{"text":"                                )))","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        Some('D') => {","highlight_start":1,"highlight_end":39},{"text":"                            if method_name == \"isDigit\" {","highlight_start":1,"highlight_end":58},{"text":"                                if arg_count != 0 {","highlight_start":1,"highlight_end":52},{"text":"                                    Err(self.runtime_error(\"isDigit requires no arguments.\"))","highlight_start":1,"highlight_end":94},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    self.pop();","highlight_start":1,"highlight_end":48},{"text":"                                    self.push(Value::Bool(","highlight_start":1,"highlight_end":59},{"text":"                                        self.gc.deref(string).chars().all(char::is_numeric),","highlight_start":1,"highlight_end":93},{"text":"                                    ))","highlight_start":1,"highlight_end":39},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                Err(self.runtime_error(&format!(","highlight_start":1,"highlight_end":65},{"text":"                                    \"String doesn't have {} as method.\",","highlight_start":1,"highlight_end":73},{"text":"                                    method_name","highlight_start":1,"highlight_end":48},{"text":"                                )))","highlight_start":1,"highlight_end":36},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        _ => Err(self.runtime_error(&format!(","highlight_start":1,"highlight_end":62},{"text":"                            \"String doesn't have {} as method.\",","highlight_start":1,"highlight_end":65},{"text":"                            method_name","highlight_start":1,"highlight_end":40},{"text":"                        ))),","highlight_start":1,"highlight_end":29},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    _ => Err(self","highlight_start":1,"highlight_end":34},{"text":"                        .runtime_error(&format!(\"String doesn't have {} as method.\", method_name))),","highlight_start":1,"highlight_end":101},{"text":"                },","highlight_start":1,"highlight_end":19},{"text":"                'f' => {","highlight_start":1,"highlight_end":25},{"text":"                    if method_name == \"float\" {","highlight_start":1,"highlight_end":48},{"text":"                        if arg_count != 0 {","highlight_start":1,"highlight_end":44},{"text":"                            Err(self.runtime_error(\"ord requires no arguments.\"))","highlight_start":1,"highlight_end":82},{"text":"                        } else if self.gc.deref(string).chars().count() == 1 {","highlight_start":1,"highlight_end":79},{"text":"                            let c = self.gc.deref(string).chars().next().unwrap();","highlight_start":1,"highlight_end":83},{"text":"                            self.push_number((c as u32) as f64)","highlight_start":1,"highlight_end":64},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(self.runtime_error(\"ord can be called on one-char strings only.\"))","highlight_start":1,"highlight_end":99},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(self.runtime_error(&format!(","highlight_start":1,"highlight_end":57},{"text":"                            \"String doesn't have {} as method.\",","highlight_start":1,"highlight_end":65},{"text":"                            method_name","highlight_start":1,"highlight_end":40},{"text":"                        )))","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                'l' => {","highlight_start":1,"highlight_end":25},{"text":"                    if method_name == \"length\" {","highlight_start":1,"highlight_end":49},{"text":"                        if arg_count != 0 {","highlight_start":1,"highlight_end":44},{"text":"                            Err(self.runtime_error(\"length requires no arguments.\"))","highlight_start":1,"highlight_end":85},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            self.pop();","highlight_start":1,"highlight_end":40},{"text":"                            self.push_number(self.gc.deref(string).len() as f64)","highlight_start":1,"highlight_end":81},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(self.runtime_error(&format!(","highlight_start":1,"highlight_end":57},{"text":"                            \"String doesn't have {} as method.\",","highlight_start":1,"highlight_end":65},{"text":"                            method_name","highlight_start":1,"highlight_end":40},{"text":"                        )))","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                'o' => {","highlight_start":1,"highlight_end":25},{"text":"                    if method_name == \"ord\" {","highlight_start":1,"highlight_end":46},{"text":"                        if arg_count != 0 {","highlight_start":1,"highlight_end":44},{"text":"                            Err(self.runtime_error(\"ord requires no arguments.\"))","highlight_start":1,"highlight_end":82},{"text":"                        } else if self.gc.deref(string).chars().count() == 1 {","highlight_start":1,"highlight_end":79},{"text":"                            let c = self.gc.deref(string).chars().next().unwrap();","highlight_start":1,"highlight_end":83},{"text":"                            self.push_number((c as u32) as f64)","highlight_start":1,"highlight_end":64},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(self.runtime_error(\"ord can be called on one-char strings only.\"))","highlight_start":1,"highlight_end":99},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(self.runtime_error(&format!(","highlight_start":1,"highlight_end":57},{"text":"                            \"String doesn't have {} as method.\",","highlight_start":1,"highlight_end":65},{"text":"                            method_name","highlight_start":1,"highlight_end":40},{"text":"                        )))","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    Err(self","highlight_start":1,"highlight_end":29},{"text":"                        .runtime_error(&format!(\"String doesn't have {} as method.\", method_name)))","highlight_start":1,"highlight_end":100},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else if let Value::Instance(instance) = receiver {","highlight_start":1,"highlight_end":61},{"text":"            let instance = self.gc.deref(instance);","highlight_start":1,"highlight_end":52},{"text":"            if let Some(&value) = instance.fields.get(&name) {","highlight_start":1,"highlight_end":63},{"text":"                let pos = self.stack.len() - 1 - arg_count;","highlight_start":1,"highlight_end":60},{"text":"                self.stack[pos] = value;","highlight_start":1,"highlight_end":41},{"text":"                self.call_value(value, arg_count)","highlight_start":1,"highlight_end":50},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                let class = instance.class;","highlight_start":1,"highlight_end":44},{"text":"                self.invoke_from_class(class, name, arg_count)","highlight_start":1,"highlight_end":63},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else if let Value::Array(array) = receiver {","highlight_start":1,"highlight_end":55},{"text":"            match &*method_name {","highlight_start":1,"highlight_end":34},{"text":"                \"all\" => {","highlight_start":1,"highlight_end":27},{"text":"                    if arg_count != 0 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"all requires no arguments.\"))","highlight_start":1,"highlight_end":78},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push(Value::Bool(","highlight_start":1,"highlight_end":47},{"text":"                            !self.gc.deref(array).iter().any(|&x| x.is_false()),","highlight_start":1,"highlight_end":81},{"text":"                        ))","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"any\" => {","highlight_start":1,"highlight_end":27},{"text":"                    if arg_count != 0 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"any requires no arguments.\"))","highlight_start":1,"highlight_end":78},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push(Value::Bool(","highlight_start":1,"highlight_end":47},{"text":"                            self.gc.deref(array).iter().any(|&x| !x.is_false()),","highlight_start":1,"highlight_end":81},{"text":"                        ))","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"extend\" => {","highlight_start":1,"highlight_end":30},{"text":"                    if arg_count != 1 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"extend requires only one argument.\"))","highlight_start":1,"highlight_end":86},{"text":"                    } else if let Value::Array(array_ref) = self.pop() {","highlight_start":1,"highlight_end":73},{"text":"                        let mut new_array = self.gc.deref(array_ref).clone();","highlight_start":1,"highlight_end":78},{"text":"                        self.gc.deref_mut(array).append(&mut new_array);","highlight_start":1,"highlight_end":73},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push(Value::Nil)","highlight_start":1,"highlight_end":46},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(self.runtime_error(\"extend needs an array as argument\"))","highlight_start":1,"highlight_end":85},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"length\" => {","highlight_start":1,"highlight_end":30},{"text":"                    if arg_count != 0 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"length requires no arguments.\"))","highlight_start":1,"highlight_end":81},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push_number(self.gc.deref(array).len() as f64)","highlight_start":1,"highlight_end":76},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"pop\" => {","highlight_start":1,"highlight_end":27},{"text":"                    if arg_count != 0 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"pop requires no arguments.\"))","highlight_start":1,"highlight_end":78},{"text":"                    } else if let Some(value) = self.gc.deref_mut(array).pop() {","highlight_start":1,"highlight_end":81},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push(value)","highlight_start":1,"highlight_end":41},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(self.runtime_error(\"No element in array when popping from it.\"))","highlight_start":1,"highlight_end":93},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"push\" => {","highlight_start":1,"highlight_end":28},{"text":"                    if arg_count == 0 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"No arguments given to function push.\"))","highlight_start":1,"highlight_end":88},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        let mut temp = Vec::new();","highlight_start":1,"highlight_end":51},{"text":"                        for _ in 0..arg_count {","highlight_start":1,"highlight_end":48},{"text":"                            temp.push(self.pop());","highlight_start":1,"highlight_end":51},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        temp.reverse();","highlight_start":1,"highlight_end":40},{"text":"                        self.gc.deref_mut(array).append(&mut temp);","highlight_start":1,"highlight_end":68},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push(Value::Nil)","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"reverse\" => {","highlight_start":1,"highlight_end":31},{"text":"                    if arg_count != 0 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"reverse requires only one argument.\"))","highlight_start":1,"highlight_end":87},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.gc.deref_mut(array).reverse();","highlight_start":1,"highlight_end":60},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push(Value::Nil)","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"sort\" => {","highlight_start":1,"highlight_end":28},{"text":"                    if arg_count != 0 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"sort requires no arguments.\"))","highlight_start":1,"highlight_end":79},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        let array = self.gc.deref_mut(array);","highlight_start":1,"highlight_end":62},{"text":"                        if array.iter().all(|&x| matches!(x, Value::Number(_))) {","highlight_start":1,"highlight_end":82},{"text":"                            array.sort_by(|a, b| {","highlight_start":1,"highlight_end":51},{"text":"                                if let (Value::Number(a), Value::Number(b)) = (a, b) {","highlight_start":1,"highlight_end":87},{"text":"                                    a.partial_cmp(b).unwrap_or(std::cmp::Ordering::Less)","highlight_start":1,"highlight_end":89},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    panic!();","highlight_start":1,"highlight_end":46},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            self.pop();","highlight_start":1,"highlight_end":40},{"text":"                            self.push(Value::Nil)","highlight_start":1,"highlight_end":50},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(self.runtime_error(\"Cannot sort an array with not-number elements\"))","highlight_start":1,"highlight_end":101},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    Err(self","highlight_start":1,"highlight_end":29},{"text":"                        .runtime_error(&format!(\"Array doesn't have {} as method.\", method_name)))","highlight_start":1,"highlight_end":99},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else if let Value::Number(n) = receiver {","highlight_start":1,"highlight_end":52},{"text":"            match &*method_name {","highlight_start":1,"highlight_end":34},{"text":"                \"abs\" => {","highlight_start":1,"highlight_end":27},{"text":"                    if arg_count != 0 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"abs expects only one argument.\"))","highlight_start":1,"highlight_end":82},{"text":"                    } else if let Value::Number(n) = self.pop() {","highlight_start":1,"highlight_end":66},{"text":"                        self.push_number(n.abs())","highlight_start":1,"highlight_end":50},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(self.runtime_error(\"abs needs numeric argument.\"))","highlight_start":1,"highlight_end":79},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"ceil\" => {","highlight_start":1,"highlight_end":28},{"text":"                    if arg_count != 0 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"ceil needs one argument.\"))","highlight_start":1,"highlight_end":76},{"text":"                    } else if let Value::Number(n) = self.pop() {","highlight_start":1,"highlight_end":66},{"text":"                        self.push_number(n.ceil())","highlight_start":1,"highlight_end":51},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(self.runtime_error(\"ceil needs numeric argument.\"))","highlight_start":1,"highlight_end":80},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"chr\" => {","highlight_start":1,"highlight_end":27},{"text":"                    if arg_count != 0 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"chr requires no arguments.\"))","highlight_start":1,"highlight_end":78},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        let n = if n.fract() == 0.0 {","highlight_start":1,"highlight_end":54},{"text":"                            n as u32","highlight_start":1,"highlight_end":37},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(self.runtime_error(\"chr needs an integer argument.\"));","highlight_start":1,"highlight_end":94},{"text":"                        };","highlight_start":1,"highlight_end":27},{"text":"                        let s = match char::from_u32(n) {","highlight_start":1,"highlight_end":58},{"text":"                            Some(c) => self.intern(c.to_string()),","highlight_start":1,"highlight_end":67},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                return Err(self.runtime_error(\"chr couldn't read number to char\"))","highlight_start":1,"highlight_end":99},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        };","highlight_start":1,"highlight_end":27},{"text":"                        self.push(Value::VString(s))","highlight_start":1,"highlight_end":53},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"floor\" => {","highlight_start":1,"highlight_end":29},{"text":"                    if arg_count != 0 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"floor needs one argument.\"))","highlight_start":1,"highlight_end":77},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push_number(n.floor())","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"pow\" => {","highlight_start":1,"highlight_end":27},{"text":"                    if arg_count != 1 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"sqrt expects only one argument\"))","highlight_start":1,"highlight_end":82},{"text":"                    } else if let Value::Number(n1) = self.pop() {","highlight_start":1,"highlight_end":67},{"text":"                        self.push_number(n.powf(n1))","highlight_start":1,"highlight_end":53},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        Err(self.runtime_error(\"sqrt needs numeric argument\"))","highlight_start":1,"highlight_end":79},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"sqrt\" => {","highlight_start":1,"highlight_end":28},{"text":"                    if arg_count != 0 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"sqrt expects only one argument\"))","highlight_start":1,"highlight_end":82},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push_number(n.sqrt())","highlight_start":1,"highlight_end":51},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                \"square\" => {","highlight_start":1,"highlight_end":30},{"text":"                    if arg_count != 0 {","highlight_start":1,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"square expects only one argument\"))","highlight_start":1,"highlight_end":84},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push_number(n * n)","highlight_start":1,"highlight_end":48},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {","highlight_start":1,"highlight_end":23},{"text":"                    Err(self","highlight_start":1,"highlight_end":29},{"text":"                        .runtime_error(&format!(\"Float doesn't have {} as method.\", method_name)))","highlight_start":1,"highlight_end":99},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else if method_name == \"toString\" {","highlight_start":1,"highlight_end":46},{"text":"            if arg_count != 0 {","highlight_start":1,"highlight_end":32},{"text":"                Err(self.runtime_error(\"toString requires no arguments\"))","highlight_start":1,"highlight_end":74},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                let string = format!(\"{}\", GcTraceFormatter::new(receiver, &self.gc));","highlight_start":1,"highlight_end":87},{"text":"                let string = self.alloc(string);","highlight_start":1,"highlight_end":49},{"text":"                self.pop();","highlight_start":1,"highlight_end":28},{"text":"                self.push(Value::VString(string))","highlight_start":1,"highlight_end":50},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            Err(self.runtime_error(\"Only instances have methods.\"))","highlight_start":1,"highlight_end":68},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function has too many lines (339/100)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:890:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m890\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn invoke(&mut self, name: GcRef<String>, arg_count: usize) -> Result<(), InterpretError> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m891\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let receiver = self.peek(arg_count);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m892\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let method_name = self.gc.deref(name).clone();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m893\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if method_name == \"copy\" {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":38962,"byte_end":39953,"line_start":894,"line_end":917,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            if arg_count != 0 {","highlight_start":13,"highlight_end":32},{"text":"                Err(self.runtime_error(\"Copy requires only one argument.\"))","highlight_start":1,"highlight_end":76},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                let to_push = match receiver {","highlight_start":1,"highlight_end":47},{"text":"                    Value::Array(value) => {","highlight_start":1,"highlight_end":45},{"text":"                        let new = self.gc.deref(value).clone();","highlight_start":1,"highlight_end":64},{"text":"                        let new = self.alloc(new);","highlight_start":1,"highlight_end":51},{"text":"                        Value::Array(new)","highlight_start":1,"highlight_end":42},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    Value::Instance(value) => {","highlight_start":1,"highlight_end":48},{"text":"                        let new = self.gc.deref(value).clone();","highlight_start":1,"highlight_end":64},{"text":"                        let new = self.alloc(new);","highlight_start":1,"highlight_end":51},{"text":"                        Value::Instance(new)","highlight_start":1,"highlight_end":45},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        return Err(self.runtime_error(&format!(","highlight_start":1,"highlight_end":64},{"text":"                            \"Function copy is not defined for {}\",","highlight_start":1,"highlight_end":67},{"text":"                            receiver.type_of()","highlight_start":1,"highlight_end":47},{"text":"                        )))","highlight_start":1,"highlight_end":28},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                self.pop();","highlight_start":1,"highlight_end":28},{"text":"                self.push(to_push)","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:894:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m894\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m895\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Err(self.runtime_error(\"Copy requires only one argument.\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m896\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m897\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let to_push = match receiver {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m916\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.push(to_push)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m917\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":40428,"byte_end":40865,"line_start":928,"line_end":935,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"                                if arg_count != 0 {","highlight_start":33,"highlight_end":52},{"text":"                                    Err(self.runtime_error(\"isAlpha requires no arguments.\"))","highlight_start":1,"highlight_end":94},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    self.pop();","highlight_start":1,"highlight_end":48},{"text":"                                    self.push(Value::Bool(","highlight_start":1,"highlight_end":59},{"text":"                                        self.gc.deref(string).chars().all(char::is_alphabetic),","highlight_start":1,"highlight_end":96},{"text":"                                    ))","highlight_start":1,"highlight_end":39},{"text":"                                }","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:928:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m928\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m929\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       Err(self.runtime_error(\"isAlpha requires no arguments.\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m930\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m931\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       self.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m934\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       ))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m935\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":40972,"byte_end":41418,"line_start":937,"line_end":944,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"                                if arg_count != 0 {","highlight_start":33,"highlight_end":52},{"text":"                                    Err(self.runtime_error(\"isAlphaNumeric requires no arguments.\"))","highlight_start":1,"highlight_end":101},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    self.pop();","highlight_start":1,"highlight_end":48},{"text":"                                    self.push(Value::Bool(","highlight_start":1,"highlight_end":59},{"text":"                                        self.gc.deref(string).chars().all(char::is_alphanumeric),","highlight_start":1,"highlight_end":98},{"text":"                                    ))","highlight_start":1,"highlight_end":39},{"text":"                                }","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:937:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m937\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m938\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       Err(self.runtime_error(\"isAlphaNumeric requires no arguments.\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m939\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m940\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       self.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m943\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       ))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m944\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":41873,"byte_end":42307,"line_start":954,"line_end":961,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"                                if arg_count != 0 {","highlight_start":33,"highlight_end":52},{"text":"                                    Err(self.runtime_error(\"isDigit requires no arguments.\"))","highlight_start":1,"highlight_end":94},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    self.pop();","highlight_start":1,"highlight_end":48},{"text":"                                    self.push(Value::Bool(","highlight_start":1,"highlight_end":59},{"text":"                                        self.gc.deref(string).chars().all(char::is_numeric),","highlight_start":1,"highlight_end":93},{"text":"                                    ))","highlight_start":1,"highlight_end":39},{"text":"                                }","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:954:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m954\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m955\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       Err(self.runtime_error(\"isDigit requires no arguments.\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m956\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m957\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       self.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m960\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       ))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m961\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"casting `u32` to `f64` may become silently lossy if you later change the type","code":{"code":"clippy::cast_lossless","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":43424,"byte_end":43441,"line_start":983,"line_end":983,"column_start":46,"column_end":63,"is_primary":true,"text":[{"text":"                            self.push_number((c as u32) as f64)","highlight_start":46,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::cast-lossless` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":43424,"byte_end":43441,"line_start":983,"line_end":983,"column_start":46,"column_end":63,"is_primary":true,"text":[{"text":"                            self.push_number((c as u32) as f64)","highlight_start":46,"highlight_end":63}],"label":null,"suggested_replacement":"f64::from((c as u32))","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `u32` to `f64` may become silently lossy if you later change the type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:983:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m983\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   self.push_number((c as u32) as f64)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `f64::from((c as u32))`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":43971,"byte_end":44260,"line_start":996,"line_end":1001,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                        if arg_count != 0 {","highlight_start":25,"highlight_end":44},{"text":"                            Err(self.runtime_error(\"length requires no arguments.\"))","highlight_start":1,"highlight_end":85},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            self.pop();","highlight_start":1,"highlight_end":40},{"text":"                            self.push_number(self.gc.deref(string).len() as f64)","highlight_start":1,"highlight_end":81},{"text":"                        }","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:996:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m996\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m997\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Err(self.runtime_error(\"length requires no arguments.\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m998\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m999\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            self.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1000\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            self.push_number(self.gc.deref(string).len() as f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1001\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)","code":{"code":"clippy::cast_precision_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":44198,"byte_end":44232,"line_start":1000,"line_end":1000,"column_start":46,"column_end":80,"is_primary":true,"text":[{"text":"                            self.push_number(self.gc.deref(string).len() as f64)","highlight_start":46,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1000:46\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1000\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   self.push_number(self.gc.deref(string).len() as f64)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss\u001b[0m\n\n"}
{"message":"casting `u32` to `f64` may become silently lossy if you later change the type","code":{"code":"clippy::cast_lossless","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":44938,"byte_end":44955,"line_start":1015,"line_end":1015,"column_start":46,"column_end":63,"is_primary":true,"text":[{"text":"                            self.push_number((c as u32) as f64)","highlight_start":46,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":44938,"byte_end":44955,"line_start":1015,"line_end":1015,"column_start":46,"column_end":63,"is_primary":true,"text":[{"text":"                            self.push_number((c as u32) as f64)","highlight_start":46,"highlight_end":63}],"label":null,"suggested_replacement":"f64::from((c as u32))","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `u32` to `f64` may become silently lossy if you later change the type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1015:46\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1015\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   self.push_number((c as u32) as f64)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `f64::from((c as u32))`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":46192,"byte_end":46538,"line_start":1044,"line_end":1051,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    if arg_count != 0 {","highlight_start":21,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"all requires no arguments.\"))","highlight_start":1,"highlight_end":78},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push(Value::Bool(","highlight_start":1,"highlight_end":47},{"text":"                            !self.gc.deref(array).iter().any(|&x| x.is_false()),","highlight_start":1,"highlight_end":81},{"text":"                        ))","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1044:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1044\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1045\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Err(self.runtime_error(\"all requires no arguments.\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1046\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1047\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1050\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        ))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1051\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":46607,"byte_end":46953,"line_start":1054,"line_end":1061,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    if arg_count != 0 {","highlight_start":21,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"any requires no arguments.\"))","highlight_start":1,"highlight_end":78},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push(Value::Bool(","highlight_start":1,"highlight_end":47},{"text":"                            self.gc.deref(array).iter().any(|&x| !x.is_false()),","highlight_start":1,"highlight_end":81},{"text":"                        ))","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1054:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1054\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1055\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Err(self.runtime_error(\"any requires no arguments.\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1056\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1057\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1060\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        ))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1061\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":47653,"byte_end":47921,"line_start":1076,"line_end":1081,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    if arg_count != 0 {","highlight_start":21,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"length requires no arguments.\"))","highlight_start":1,"highlight_end":81},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push_number(self.gc.deref(array).len() as f64)","highlight_start":1,"highlight_end":76},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1076:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1076\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1077\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Err(self.runtime_error(\"length requires no arguments.\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1079\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.push_number(self.gc.deref(array).len() as f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1081\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)","code":{"code":"clippy::cast_precision_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":47864,"byte_end":47897,"line_start":1080,"line_end":1080,"column_start":42,"column_end":75,"is_primary":true,"text":[{"text":"                        self.push_number(self.gc.deref(array).len() as f64)","highlight_start":42,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1080:42\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.push_number(self.gc.deref(array).len() as f64)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":49074,"byte_end":49379,"line_start":1108,"line_end":1114,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    if arg_count != 0 {","highlight_start":21,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"reverse requires only one argument.\"))","highlight_start":1,"highlight_end":87},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.gc.deref_mut(array).reverse();","highlight_start":1,"highlight_end":60},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push(Value::Nil)","highlight_start":1,"highlight_end":46},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1108:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Err(self.runtime_error(\"reverse requires only one argument.\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.gc.deref_mut(array).reverse();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.push(Value::Nil)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":49449,"byte_end":50389,"line_start":1117,"line_end":1134,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    if arg_count != 0 {","highlight_start":21,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"sort requires no arguments.\"))","highlight_start":1,"highlight_end":79},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        let array = self.gc.deref_mut(array);","highlight_start":1,"highlight_end":62},{"text":"                        if array.iter().all(|&x| matches!(x, Value::Number(_))) {","highlight_start":1,"highlight_end":82},{"text":"                            array.sort_by(|a, b| {","highlight_start":1,"highlight_end":51},{"text":"                                if let (Value::Number(a), Value::Number(b)) = (a, b) {","highlight_start":1,"highlight_end":87},{"text":"                                    a.partial_cmp(b).unwrap_or(std::cmp::Ordering::Less)","highlight_start":1,"highlight_end":89},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    panic!();","highlight_start":1,"highlight_end":46},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            });","highlight_start":1,"highlight_end":32},{"text":"                            self.pop();","highlight_start":1,"highlight_end":40},{"text":"                            self.push(Value::Nil)","highlight_start":1,"highlight_end":50},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            Err(self.runtime_error(\"Cannot sort an array with not-number elements\"))","highlight_start":1,"highlight_end":101},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1117:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Err(self.runtime_error(\"sort requires no arguments.\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        let array = self.gc.deref_mut(array);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":51575,"byte_end":52392,"line_start":1162,"line_end":1178,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    if arg_count != 0 {","highlight_start":21,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"chr requires no arguments.\"))","highlight_start":1,"highlight_end":78},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        let n = if n.fract() == 0.0 {","highlight_start":1,"highlight_end":54},{"text":"                            n as u32","highlight_start":1,"highlight_end":37},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            return Err(self.runtime_error(\"chr needs an integer argument.\"));","highlight_start":1,"highlight_end":94},{"text":"                        };","highlight_start":1,"highlight_end":27},{"text":"                        let s = match char::from_u32(n) {","highlight_start":1,"highlight_end":58},{"text":"                            Some(c) => self.intern(c.to_string()),","highlight_start":1,"highlight_end":67},{"text":"                            None => {","highlight_start":1,"highlight_end":38},{"text":"                                return Err(self.runtime_error(\"chr couldn't read number to char\"))","highlight_start":1,"highlight_end":99},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        };","highlight_start":1,"highlight_end":27},{"text":"                        self.push(Value::VString(s))","highlight_start":1,"highlight_end":53},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1162:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Err(self.runtime_error(\"chr requires no arguments.\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.push(Value::VString(s))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"casting `f64` to `u32` may truncate the value","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":51825,"byte_end":51833,"line_start":1167,"line_end":1167,"column_start":29,"column_end":37,"is_primary":true,"text":[{"text":"                            n as u32","highlight_start":29,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `u32` may truncate the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1167:29\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   n as u32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\n"}
{"message":"casting `f64` to `u32` may lose the sign of the value","code":{"code":"clippy::cast_sign_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":51825,"byte_end":51833,"line_start":1167,"line_end":1167,"column_start":29,"column_end":37,"is_primary":true,"text":[{"text":"                            n as u32","highlight_start":29,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `u32` may lose the sign of the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1167:29\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   n as u32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":52463,"byte_end":52703,"line_start":1181,"line_end":1186,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    if arg_count != 0 {","highlight_start":21,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"floor needs one argument.\"))","highlight_start":1,"highlight_end":77},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push_number(n.floor())","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1181:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Err(self.runtime_error(\"floor needs one argument.\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.push_number(n.floor())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":53199,"byte_end":53443,"line_start":1198,"line_end":1203,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    if arg_count != 0 {","highlight_start":21,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"sqrt expects only one argument\"))","highlight_start":1,"highlight_end":82},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push_number(n.sqrt())","highlight_start":1,"highlight_end":51},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1198:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Err(self.runtime_error(\"sqrt expects only one argument\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.push_number(n.sqrt())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":53515,"byte_end":53758,"line_start":1206,"line_end":1211,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    if arg_count != 0 {","highlight_start":21,"highlight_end":40},{"text":"                        Err(self.runtime_error(\"square expects only one argument\"))","highlight_start":1,"highlight_end":84},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        self.pop();","highlight_start":1,"highlight_end":36},{"text":"                        self.push_number(n * n)","highlight_start":1,"highlight_end":48},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1206:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Err(self.runtime_error(\"square expects only one argument\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.push_number(n * n)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":54026,"byte_end":54375,"line_start":1219,"line_end":1226,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            if arg_count != 0 {","highlight_start":13,"highlight_end":32},{"text":"                Err(self.runtime_error(\"toString requires no arguments\"))","highlight_start":1,"highlight_end":74},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                let string = format!(\"{}\", GcTraceFormatter::new(receiver, &self.gc));","highlight_start":1,"highlight_end":87},{"text":"                let string = self.alloc(string);","highlight_start":1,"highlight_end":49},{"text":"                self.pop();","highlight_start":1,"highlight_end":28},{"text":"                self.push(Value::VString(string))","highlight_start":1,"highlight_end":50},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1219:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if arg_count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Err(self.runtime_error(\"toString requires no arguments\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let string = format!(\"{}\", GcTraceFormatter::new(receiver, &self.gc));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.push(Value::VString(string))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":55033,"byte_end":55279,"line_start":1246,"line_end":1252,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            if count != 0 {","highlight_start":13,"highlight_end":28},{"text":"                Err(self.runtime_error(\"toString requires no arguments.\"))","highlight_start":1,"highlight_end":75},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                let name = class.name;","highlight_start":1,"highlight_end":39},{"text":"                self.pop();","highlight_start":1,"highlight_end":28},{"text":"                self.push(Value::VString(name))","highlight_start":1,"highlight_end":48},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1246:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1246\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if count != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                Err(self.runtime_error(\"toString requires no arguments.\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let name = class.name;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1251\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                self.push(Value::VString(name))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1252\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"this function's return value is unnecessarily wrapped by `Result`","code":{"code":"clippy::unnecessary_wraps","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":56926,"byte_end":57074,"line_start":1323,"line_end":1326,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn clock(vm: &Vm, _args: &[Value]) -> Result<Value, String> {","highlight_start":1,"highlight_end":62},{"text":"    let time = vm.start_time.elapsed().as_secs_f64();","highlight_start":1,"highlight_end":54},{"text":"    Ok(Value::Number(time))","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::unnecessary-wraps` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove `Result` from the return type...","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":56964,"byte_end":56985,"line_start":1323,"line_end":1323,"column_start":39,"column_end":60,"is_primary":true,"text":[{"text":"fn clock(vm: &Vm, _args: &[Value]) -> Result<Value, String> {","highlight_start":39,"highlight_end":60}],"label":null,"suggested_replacement":"types::Value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"...and then change returning expressions","code":null,"level":"help","spans":[{"file_name":"src/vm.rs","byte_start":57048,"byte_end":57071,"line_start":1325,"line_end":1325,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    Ok(Value::Number(time))","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":"Value::Number(time)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this function's return value is unnecessarily wrapped by `Result`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1323:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn clock(vm: &Vm, _args: &[Value]) -> Result<Value, String> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1324\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let time = vm.start_time.elapsed().as_secs_f64();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(Value::Number(time))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1326\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::unnecessary-wraps` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove `Result` from the return type...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn clock(vm: &Vm, _args: &[Value]) -> \u001b[0m\u001b[0m\u001b[38;5;10mtypes::Value\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: ...and then change returning expressions\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10mValue::Number(time)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":60728,"byte_end":61093,"line_start":1451,"line_end":1460,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    if args.len() != 2 {","highlight_start":5,"highlight_end":25},{"text":"        Err(\"random needs two arguments\".to_owned())","highlight_start":1,"highlight_end":53},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        let mut rng = rand::thread_rng();","highlight_start":1,"highlight_end":42},{"text":"        if let (Value::Number(n0), Value::Number(n1)) = (args[0], args[1]) {","highlight_start":1,"highlight_end":77},{"text":"            Ok(Value::Number(rng.gen_range(n0..n1)))","highlight_start":1,"highlight_end":53},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            Err(\"random needs two numeric arguments\".to_owned())","highlight_start":1,"highlight_end":65},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1451:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if args.len() != 2 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1452\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"random needs two arguments\".to_owned())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1453\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut rng = rand::thread_rng();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1459\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1460\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":61183,"byte_end":61751,"line_start":1465,"line_end":1478,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    if args.len() != 2 {","highlight_start":5,"highlight_end":25},{"text":"        Err(\"random needs two arguments\".to_owned())","highlight_start":1,"highlight_end":53},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        let mut rng = rand::thread_rng();","highlight_start":1,"highlight_end":42},{"text":"        if let (Value::Number(n0), Value::Number(n1)) = (args[0], args[1]) {","highlight_start":1,"highlight_end":77},{"text":"            if n0.fract() == 0.0 && n1.fract() == 0.0 {","highlight_start":1,"highlight_end":56},{"text":"                Ok(Value::Number(rng.gen_range(n0 as usize..n1 as usize) as f64))","highlight_start":1,"highlight_end":82},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                Err(\"randomInt needs two integers as arguments\".to_owned())","highlight_start":1,"highlight_end":76},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            Err(\"randomInt needs two numeric arguments\".to_owned())","highlight_start":1,"highlight_end":68},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1465:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1465\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if args.len() != 2 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1466\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err(\"random needs two arguments\".to_owned())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1467\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1468\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut rng = rand::thread_rng();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1477\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1478\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)","code":{"code":"clippy::cast_precision_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":61484,"byte_end":61530,"line_start":1471,"line_end":1471,"column_start":34,"column_end":80,"is_primary":true,"text":[{"text":"                Ok(Value::Number(rng.gen_range(n0 as usize..n1 as usize) as f64))","highlight_start":34,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1471:34\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Ok(Value::Number(rng.gen_range(n0 as usize..n1 as usize) as f64))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss\u001b[0m\n\n"}
{"message":"casting `f64` to `usize` may truncate the value","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":61498,"byte_end":61509,"line_start":1471,"line_end":1471,"column_start":48,"column_end":59,"is_primary":true,"text":[{"text":"                Ok(Value::Number(rng.gen_range(n0 as usize..n1 as usize) as f64))","highlight_start":48,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `usize` may truncate the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1471:48\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Ok(Value::Number(rng.gen_range(n0 as usize..n1 as usize) as f64))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\n"}
{"message":"casting `f64` to `usize` may lose the sign of the value","code":{"code":"clippy::cast_sign_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":61498,"byte_end":61509,"line_start":1471,"line_end":1471,"column_start":48,"column_end":59,"is_primary":true,"text":[{"text":"                Ok(Value::Number(rng.gen_range(n0 as usize..n1 as usize) as f64))","highlight_start":48,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `usize` may lose the sign of the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1471:48\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Ok(Value::Number(rng.gen_range(n0 as usize..n1 as usize) as f64))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\u001b[0m\n\n"}
{"message":"casting `f64` to `usize` may truncate the value","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":61511,"byte_end":61522,"line_start":1471,"line_end":1471,"column_start":61,"column_end":72,"is_primary":true,"text":[{"text":"                Ok(Value::Number(rng.gen_range(n0 as usize..n1 as usize) as f64))","highlight_start":61,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `usize` may truncate the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1471:61\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Ok(Value::Number(rng.gen_range(n0 as usize..n1 as usize) as f64))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\n"}
{"message":"casting `f64` to `usize` may lose the sign of the value","code":{"code":"clippy::cast_sign_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/vm.rs","byte_start":61511,"byte_end":61522,"line_start":1471,"line_end":1471,"column_start":61,"column_end":72,"is_primary":true,"text":[{"text":"                Ok(Value::Number(rng.gen_range(n0 as usize..n1 as usize) as f64))","highlight_start":61,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `f64` to `usize` may lose the sign of the value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/vm.rs:1471:61\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1471\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                Ok(Value::Number(rng.gen_range(n0 as usize..n1 as usize) as f64))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\u001b[0m\n\n"}
{"message":"92 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 92 warnings emitted\u001b[0m\n\n"}
